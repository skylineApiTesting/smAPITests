{
  "info": {
    "_postman_id": "114028fd-8908-4e50-8e9e-eb0d28d364c6",
    "name": "Stream Manager Admin",
    "description": "This collection contains tests for stream manager APIs to run as an admin user.\n\nDocumentation for stream manager APIs can be found on 172.28.12.54/docs",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "a139401d-2bfc-4f61-8556-6950f75b9abd",
      "name": "Login",
      "description": null,
      "item": [
        {
          "_postman_id": "fb8efba4-be34-4278-b5bc-099d0ab5fb4f",
          "name": "Empty Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cdf83a48-2d7c-43ee-a1dd-8fcb13cfbb95",
                "exec": [
                  "pm.test(\"C77283 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77283 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77283 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "15813c9e-9965-44c3-b14a-eab62f18291e",
          "name": "Empty Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1c1fbaef-b26d-431f-96d2-ea393aca93ba",
                "exec": [
                  "pm.test(\"C77284 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77284 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77284 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "2b025c8f-6d06-449d-b7b1-a92491ba499f",
          "name": "Empty Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b005cd07-393e-4d33-b1dc-e141d3b7ae7f",
                "exec": [
                  "pm.test(\"C77285 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77285 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77285 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "sm1000",
                  "type": "text"
                }
              ]
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "d12a0eeb-48d0-42ed-be74-dede2daaa784",
          "name": "Invalid Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f390d2f-ddeb-4ce0-a2a3-8bbdaa376370",
                "exec": [
                  "pm.test(\"C77287 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77287 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77287 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "wrongUser",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "sm1000",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "56933c62-8815-4ef8-b503-4be7effadb4a",
          "name": "Invalid Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e0608f42-6650-4b53-9a34-6dd313ef6af9",
                "exec": [
                  "pm.test(\"C77286 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77286 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77286 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "admin",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "wrongPassword",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "1735f59c-15b8-4227-81fb-d680ff8d9c4c",
          "name": "Password Wrong Case",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4d4a7612-de72-4220-92b4-8fd9d766f259",
                "exec": [
                  "pm.test(\"C77288 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77288 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77288 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "admin",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "SM1000",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "8b29fd4c-e92f-4a64-828d-3fb17eea810a",
          "name": "Username Wrong Case Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66c1c821-2ce2-40ec-b411-56ffbbdb5ee8",
                "exec": [
                  "pm.test(\"C78214 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78214 Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "ADMIN",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "sm1000",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "10a568bc-e26f-445a-afef-ecd65449bbab",
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4a9eb4d-86f2-40f4-9f83-c26106d731b6",
                "exec": [
                  "pm.test(\"C77292 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77292 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "82f83625-9808-49f9-8a06-9bfe89e7de5e",
          "name": "Username Password Swapped",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8449b7ee-930f-4930-ae91-90a0804ce2f1",
                "exec": [
                  "pm.test(\"C77289 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77289 Body Contains Login Fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                  "});",
                  "",
                  "pm.test(\"C77289 Body Contains Error\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "sm1000",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "admin",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "f70fd7af-b368-4bef-9890-90ae3c519453",
          "name": "Login Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1efdff2a-8c60-4bc4-a201-ecce7e8e3948",
                "exec": [
                  "//pm.test(\"C77291 Body IsAdministrator field to show it is logged in\", function () {",
                  "//    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "//});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "admin",
                  "description": ""
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "sm1000"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "e0446629-e293-4fdc-a838-499baf7a60c2",
      "name": "User",
      "description": "User section of Stream Manager\n",
      "item": [
        {
          "_postman_id": "245895e6-ecfb-4a38-bb87-5c16de2188c4",
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "    ",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "admin",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "sm1000",
                  "type": "text"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "1c744416-8ee1-4f79-9238-65bc79c84731",
          "name": "Create Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ee086e9b-758c-4f73-b785-b307f28d6c73",
                "exec": [
                  "pm.test(\"C77441 User was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    pm.environment.unset(\"user_ID\");",
                  "    pm.environment.unset(\"user_name\");",
                  "    pm.environment.set(\"user_ID\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                  "    pm.environment.set(\"user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                  "});",
                  "",
                  "pm.test(\"C77441 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "user_email = pm.environment.get(\"user_email\");",
                  "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                  "",
                  "pm.test(\"C77441 Body has email\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email);",
                  "});",
                  "",
                  "pm.test(\"C77441 Body has personal name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(admin_personal_name);",
                  "});",
                  "",
                  "pm.test(\"C77441 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                "exec": [
                  "pm.environment.unset(\"user_name\");",
                  "pm.environment.unset(\"user_email\");",
                  "",
                  "var user_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var user_email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"user_name\", user_name);",
                  "pm.environment.set(\"user_email\", user_email+\"@gmail.com\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": 0,\n\t\t\t\t\"username\": \"User {{$timestamp}}\",\n\t\t\t\t\"password\": \"{{admin_password}}\",\n\t\t\t\t\"personal_name\": \"{{admin_personal_name}}\",\n\t\t\t\t\"email\": \"{{user_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": true\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "creates an admin user in stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "8349e5df-4e9a-4a80-a4d5-0d1ccf28e404",
          "name": "Create Operator",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26b6c30f-c56b-42b6-96c5-336163e50673",
                "exec": [
                  "pm.test(\"C77442 User was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    pm.environment.unset(\"operator_id\");",
                  "    pm.environment.unset(\"operator_user_name\");",
                  "    pm.environment.set(\"operator_id\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                  "    pm.environment.set(\"operator_user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                  "});",
                  "",
                  "pm.test(\"C77442 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "operator_email = pm.environment.get(\"operator_email\");",
                  "",
                  "pm.test(\"C77442 Body has email\", function () {",
                  "    pm.expect(pm.response.text()).to.include(operator_email);",
                  "});",
                  "",
                  "pm.test(\"C77442 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                "exec": [
                  "pm.environment.unset(\"operator_user_name\");",
                  "pm.environment.unset(\"operator_email\");",
                  "",
                  "var operator_user_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var operator_email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"operator_user_name\", operator_user_name);",
                  "pm.environment.set(\"operator_email\", operator_email+\"@gmail.com\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": \"{{operator_id}}\",\n\t\t\t\t\"username\": \"User {{$timestamp}}\",\n\t\t\t\t\"password\": \"{{operator_password}}\",\n\t\t\t\t\"personal_name\": \"{{operator_personal_name}}\",\n\t\t\t\t\"email\": \"{{operator_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": false\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "creates an admin user in stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "340ce49f-29d5-4121-bd90-4871b840bfb8",
          "name": "Retrieve Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b873ecaf-b3eb-4cfb-ae8f-4773be5da451",
                "exec": [
                  "user_email = pm.environment.get(\"user_email\");",
                  "user_name = pm.environment.get(\"user_name\");",
                  "pm.test(\"C78215 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"getUsers\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "pm.test(\"C78215 Body includes user\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_name);",
                  "});",
                  "",
                  "pm.test(\"C78215 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
          },
          "response": []
        },
        {
          "_postman_id": "d0f17c7d-a89c-4f2e-b28c-2b5d68c94707",
          "name": "Update Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                "exec": [
                  "admin_personal_name_EDIT = pm.environment.get(\"admin_personal_name_EDIT\");",
                  "",
                  "pm.test(\"C77450 Body includes edited edited personal name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(admin_personal_name_EDIT);",
                  "});",
                  "",
                  "user_email_EDIT = pm.environment.get(\"user_email_EDIT\");",
                  "",
                  "pm.test(\"C77450 Response contains edited email address\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77450 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                "exec": [
                  "user_email = pm.environment.get(\"user_email\");",
                  "admin_password = pm.environment.get(\"admin_password\");",
                  "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                  "",
                  "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + user_email);",
                  "pm.environment.set(\"admin_password_EDIT\", \"EDIT\" + admin_password);",
                  "pm.environment.set(\"admin_personal_name_EDIT\", \"EDIT\" + admin_personal_name);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{user_ID}}\",\r\n        \"username\": \"{{user_name}}\",\r\n        \"password\": \"{{admin_password_EDIT}}\",\r\n        \"personal_name\": \"{{admin_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": true\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "06f8fc15-5ab0-4cd7-8dcc-1edb35cc8bfa",
          "name": "Update Operator",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                "exec": [
                  "user_email_EDIT = pm.environment.get(\"user_email_EDIT\");",
                  "operator_personal_name_EDIT = pm.environment.get(\"operator_personal_name_EDIT\")",
                  "",
                  "pm.test(\"C78216 Response contains edited email address\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C78216 Response contains edited personal name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C78216 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                "exec": [
                  "operator_email = pm.environment.get(\"operator_email\");",
                  "operator_password = pm.environment.get(\"operator_password\")",
                  "operator_personal_name = pm.environment.get(\"operator_personal_name\")",
                  "",
                  "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + operator_email);",
                  "pm.environment.set(\"operator_password_EDIT\", \"EDIT\" + operator_password);",
                  "pm.environment.set(\"operator_personal_name_EDIT\", \"EDIT\" + operator_personal_name);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{operator_id}}\",\r\n        \"username\": \"{{operator_user_name}}\",\r\n        \"password\": \"{{operator_password_EDIT}}\",\r\n        \"personal_name\": \"{{operator_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": false\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "8b9ffd58-5644-458f-b3fe-caf06609c3ff",
          "name": "Update Admin - Make Operator",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                "exec": [
                  "pm.test(\"C77451 Admin is now an operator\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"is_admin\":false');",
                  "});",
                  "",
                  "pm.test(\"C77451 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                "exec": [
                  "user_email = pm.environment.get(\"user_email\");",
                  "admin_password = pm.environment.get(\"admin_password\");",
                  "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                  "",
                  "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + user_email);",
                  "pm.environment.set(\"admin_password_EDIT\", \"EDIT\" + admin_password);",
                  "pm.environment.set(\"admin_personal_name_EDIT\", \"EDIT\" + admin_personal_name);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{user_ID}}\",\r\n        \"username\": \"{{user_name}}\",\r\n        \"password\": \"{{admin_password_EDIT}}\",\r\n        \"personal_name\": \"{{admin_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": false\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "abc489de-de4a-4576-8a27-4741389e2ca7",
          "name": "Login with New Operator",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                "exec": [
                  "pm.test(\"C78218 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "    ",
                  "pm.test(\"C78218 User is logged in as an operator\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=false ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{user_name}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{admin_password_EDIT}}"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "43ab7b84-7283-4733-9189-d38346728508",
          "name": "Login Super Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1efdff2a-8c60-4bc4-a201-ecce7e8e3948",
                "exec": [
                  "pm.test(\"C77291 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77291 Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{user}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{password}}"
                }
              ]
            },
            "url": "http://{{url}}",
            "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
          },
          "response": []
        },
        {
          "_postman_id": "79aeb40b-21df-4842-b513-e63e65b775ba",
          "name": "Update Operator - Make Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                "exec": [
                  "pm.test(\"C78217 Operator is now an Admin\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"is_admin\":true');",
                  "});",
                  "",
                  "pm.test(\"C78217 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{operator_id}}\",\r\n        \"username\": \"{{operator_user_name}}\",\r\n        \"password\": \"{{operator_password_EDIT}}\",\r\n        \"personal_name\": \"{{operator_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": true\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "3d220d6c-a2d5-4353-9641-2844cf2f43a5",
          "name": "Login with New Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                "exec": [
                  "pm.test(\"C78219 User is logged in as an admin\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{operator_user_name}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{operator_password_EDIT}}"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "c7347624-a691-4f77-855e-45344ab84fd9",
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "670c345d-54af-47e0-a401-d870d811612a",
                "exec": [
                  "user_name_EDIT = pm.environment.get(\"user_name_EDIT\");",
                  "",
                  "pm.test(\"C77434 Response does not contain deleted user\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(user_name_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77434 deleteUser gives success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.result.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C77434 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Users\",\n  \"method\": \"deleteUser\",\n  \"data\": [\n    {\n      \"id\": \"{{user_ID}}\",\n      \"username\": \"{{user_Name}}\",\n      \"password\": \"\",\n      \"personal_name\": \"PName\",\n      \"email\": \"jpeeling1528233076@skylinenet.net\",\n      \"date_created\": {\n        \"date\": \"2018-06-05 21:11:18.000000\",\n        \"timezone_type\": 3,\n        \"timezone\": \"GMT\"\n      },\n      \"is_admin\": true\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 21\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "deletes the user which was just created and checks to make sure the user was actually set as deleted."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "b0761115-5a9f-44c4-bf90-b4a1bc07d021",
      "name": "Dashboard",
      "description": "APIs called for the dashboard",
      "item": [
        {
          "_postman_id": "2b634568-8030-48a9-8bfa-a26142827bda",
          "name": "Login Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a81fe8e-d0ec-4a6f-a893-47108cdd8e4f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{user}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{password}}"
                }
              ]
            },
            "url": "http://{{url}}",
            "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
          },
          "response": []
        },
        {
          "_postman_id": "7abf719b-64f1-463a-9805-9ae45e3150c2",
          "name": "Get appliances",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "21b479ff-d576-41d5-9885-d6b5f624ab38",
                "exec": [
                  "pm.test(\"C78220 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78220 Appliances were listed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.result.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Appliance\",\n\t\"method\": \"getAppliances\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 2\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "85bed344-4d39-4ea4-8d50-3378b810bc4e",
          "name": "Get sfs capacity",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4dc5ab6-a817-4dc4-890b-94c1e9177b89",
                "exec": [
                  "pm.test(\"C77315 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77315 Success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.result.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Capacity\",\n\t\"method\": \"getSfsCapacity\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 14\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "7a25dc16-f7c3-4524-a25f-d657026ee1a4",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "3e5916ae-656b-492e-b7e6-c426f7b44fb6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "01bcc5e0-2f72-4fe6-b438-f55c2427e56d",
      "name": "Contacts",
      "description": null,
      "item": [
        {
          "_postman_id": "d9051480-9325-4e1e-b071-5ea9441e1656",
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd61a154-458c-4402-ab72-e27c9dc2e13f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "    ",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "58afb9fc-eb76-4e4d-b711-ce2ef4e3228a",
          "name": "Create New Contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                "exec": [
                  "pm.test(\"C77396 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "pm.test(\"C77396 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"{{contact_last_name}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"{{contact_primary_phone}}\",\n\t\t\t\t\"title\": \"{{contact_title}}\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"{{contact_company}}\",\n\t\t\t\t\"secondary_phone\": \"{{contact_secondary_phone}}\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "ec491ad1-346f-4655-9d74-cee38e14fb83",
          "name": "Retrieve Contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4558a59-a6eb-4806-a91f-254c36501ff1",
                "exec": [
                  "pm.test(\"C78221 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"getContacts\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "pm.test(\"C78221 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "contact_name = pm.environment.get(\"contact_name\");",
                  "contact_last_name = pm.environment.get(\"contact_last_name\");",
                  "contact_primary_phone = pm.environment.get(\"contact_primary_phone\");",
                  "contact_title = pm.environment.get(\"contact_title\");",
                  "contact_company = pm.environment.get(\"contact_company\");",
                  "contact_secondary_phone = pm.environment.get(\"contact_secondary_phone\");",
                  "contact_email = pm.environment.get(\"contact_email\");",
                  "",
                  "pm.test(\"C78221 Contact name is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_name);",
                  "});",
                  "pm.test(\"C78221 Contact last name is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_last_name);",
                  "});",
                  "pm.test(\"C78221 Contact primary phone is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_primary_phone);",
                  "});",
                  "pm.test(\"C78221 Contact title is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_title);",
                  "});",
                  "pm.test(\"C78221 Contact company is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_company);",
                  "});",
                  "pm.test(\"C78221 Contact secondary phone is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_secondary_phone);",
                  "});",
                  "pm.test(\"C78221 Contact email is saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_email);",
                  "});",
                  "",
                  "//Setting up for next test",
                  "pm.test(\"C78221 User was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    ",
                  "    pm.environment.unset(\"contact_id\");",
                  "    ",
                  "    pm.environment.set(\"contact_id\",jsonData[0].result.records[0].id);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 1\n  }\n]\n"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "b5110405-2da9-4188-a992-c79a12132f3b",
          "name": "Update Contact",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0cf5a165-a291-4811-81ef-da4a318a6fb4",
                "exec": [
                  "contact_name = pm.environment.get(\"contact_name\");",
                  "pm.environment.set(\"contact_name_EDIT\", contact_name + \"EDIT\");",
                  "",
                  "contact_last_name = pm.environment.get(\"contact_last_name\");",
                  "pm.environment.set(\"contact_last_name_EDIT\", contact_last_name + \"EDIT\");",
                  "",
                  "contact_title = pm.environment.get(\"contact_title\");",
                  "pm.environment.set(\"contact_title_EDIT\", contact_title + \"EDIT\");",
                  "",
                  "contact_company = pm.environment.get(\"contact_company\");",
                  "pm.environment.set(\"contact_company_EDIT\", contact_company + \"EDIT\");",
                  "",
                  "pm.environment.set(\"contact_secondary_phone_EDIT\", \"111-111-1115\");",
                  "",
                  "contact_email = pm.environment.get(\"contact_email\");",
                  "pm.environment.set(\"contact_email_EDIT\", contact_email + \"EDIT\");",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e7db2ce3-0949-47cc-a29f-e0458198eb4b",
                "exec": [
                  "contact_name_EDIT = pm.environment.get(\"contact_name_EDIT\");",
                  "contact_last_name_EDIT = pm.environment.get(\"contact_last_name_EDIT\");",
                  "contact_title_EDIT = pm.environment.get(\"contact_title_EDIT\");",
                  "contact_company_EDIT = pm.environment.get(\"contact_company_EDIT\");",
                  "contact_secondary_phone_EDIT = pm.environment.get(\"contact_secondary_phone_EDIT\");",
                  "contact_email_EDIT = pm.environment.get(\"contact_email_EDIT\");",
                  "",
                  "pm.test(\"C77395 Body includes edited first name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_name_EDIT);",
                  "});",
                  "pm.test(\"C77395 Body includes edited last name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_last_name_EDIT);",
                  "});",
                  "pm.test(\"C77395 Body includes edited title\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_title_EDIT);",
                  "});",
                  "pm.test(\"C77395 Body includes edited company\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_company_EDIT);",
                  "});",
                  "pm.test(\"C77395 Body includes edited secondary phone name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_secondary_phone_EDIT);",
                  "});",
                  "pm.test(\"C77395 Body includes edited email\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_email_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77395 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77395 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"updateContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[{\n  \"action\": \"Contact\",\n  \"method\": \"updateContact\",\n  \"data\": [\n    {\n      \"first_name\": \"{{contact_name_EDIT}}\",\n      \"last_name\": \"{{contact_last_name_EDIT}}\",\n      \"last_updated\": {\n        \"date\": \"2018-06-11 14:18:14.000000\",\n        \"timezone_type\": 3,\n        \"timezone\": \"GMT\"\n      },\n      \"primary_phone\": \"412-576-1000\",\n      \"title\": \"{{contact_title_EDIT}}\",\n      \"last_updated_by\": \"Stream Manager\",\n      \"company_name\": \"{{contact_company_EDIT}}\",\n      \"secondary_phone\": \"{{contact_secondary_phone_EDIT}}\",\n      \"email_address\": \"{{contact_email_EDIT}}@gmail.com\",\n      \"displayx\": \"793209 Allemang\",\n      \"id\": \"{{contact_id}}\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 29\n},\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 1\n  }]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "6c50932d-fbf2-448f-a6fc-c66c446f3cf0",
          "name": "Delete Contact",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "77edff98-14e0-4f52-8bdb-f90fc2fe7ea2",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b2a7a52d-a9b8-4b10-aaa9-5a5ba3acbce3",
                "exec": [
                  "contact_name_EDIT = pm.environment.get(\"contact_name_EDIT\");",
                  "contact_last_name_EDIT = pm.environment.get(\"contact_last_name_EDIT\");",
                  "contact_title_EDIT = pm.environment.get(\"contact_title_EDIT\");",
                  "contact_company_EDIT = pm.environment.get(\"contact_company_EDIT\");",
                  "contact_secondary_phone_EDIT = pm.environment.get(\"contact_secondary_phone_EDIT\");",
                  "contact_email_EDIT = pm.environment.get(\"contact_email_EDIT\");",
                  "",
                  "pm.test(\"C77399 Body does not include edited first name\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_name_EDIT);",
                  "});",
                  "pm.test(\"C77399 Body does not include edited last name\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_last_name_EDIT);",
                  "});",
                  "pm.test(\"C77399 Body does not include edited title\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_title_EDIT);",
                  "});",
                  "pm.test(\"C77399 Body does not include edited company\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_company_EDIT);",
                  "});",
                  "pm.test(\"C77399 Body does not include edited secondary phone name\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_secondary_phone_EDIT);",
                  "});",
                  "pm.test(\"C77399 Body does not include edited email\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(contact_email_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77399 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77399 deleteContact gives success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1].result.success).to.eql(true);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"Contact\",\n    \"method\": \"deleteContact\",\n    \"data\": [\n      {\n        \"first_name\": \"{{contact_first_name_EDIT}}\",\n        \"last_name\": \"bfdbfdsdf\",\n        \"last_updated\": {\n          \"date\": \"2018-06-08 17:53:23.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"primary_phone\": \"444-168-6533\",\n        \"title\": \"bdfdfgbdf\",\n        \"last_updated_by\": \"Stream Manager\",\n        \"company_name\": \"bdfsdbdf\",\n        \"secondary_phone\": \"\",\n        \"email_address\": \"{{contact_email}}@gmail.com\",\n        \"displayx\": \"1111\",\n        \"id\": \"{{contact_id}}\"\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 28\n  },\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25,\n        \"sort\": [\n          {\n            \"property\": \"last_name\",\n            \"direction\": \"ASC\"\n          }\n        ]\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 107\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "926e544e-4087-4c6e-9137-f3e3ee7ade5a",
      "name": "Zones",
      "description": null,
      "item": [
        {
          "_postman_id": "7d085612-5eee-4c3b-a472-a13ccea5e32b",
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cccdea28-e65c-438b-9419-b9f3613e77c3",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{user}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{password}}"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "e8ace92b-b3c1-4b89-8992-11ea07205e4e",
          "name": "Create New Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2312f720-db46-4552-a787-b8b1164c658e",
                "exec": [
                  "pm.test(\"C77466 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "pm.test(\"C77466 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a3492e1e-1f6a-4614-9556-fca9f9a8dc52",
                "exec": [
                  "pm.environment.unset(\"zone_name\");",
                  "pm.environment.unset(\"zone_description\");",
                  "",
                  "var zone_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var zone_description = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"zone_name\", zone_name);",
                  "pm.environment.set(\"zone_description\", zone_description);",
                  "pm.environment.set(\"zone_auto_offline\", false);",
                  "pm.environment.set(\"zone_current_status_report\", true);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"createZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": null,\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name}}\",\n\t\t\t\t\"auto_offline\": \"{{zone_auto_offline}}\",\n\t\t\t\t\"description\": \"{{zone_description}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"include_in_current_status_report\": \"{{zone_current_status_report}}\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "8cc115a8-4b97-413c-8e97-4d45089fd732",
          "name": "Retrieve Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c82a013-75a5-4154-befc-699a9e81fad4",
                "exec": [
                  "zone_name = pm.environment.get(\"zone_name\");",
                  "zone_description = pm.environment.get(\"zone_description\");",
                  "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                  "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                  "",
                  "pm.test(\"C78222 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"getZones\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "pm.test(\"C78222 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78222 Body includes zone\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_name);",
                  "});",
                  "",
                  "pm.test(\"C77466 Body has new zone description\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_description);",
                  "});",
                  "",
                  "pm.test(\"C77466 Body has auto offline setting\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_auto_offline);",
                  "});",
                  "",
                  "pm.test(\"C77466 Body has current status settings\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_current_status_report);",
                  "});",
                  "",
                  "//Setting up for next test",
                  "pm.test(\"C78222 Zone was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    ",
                  "    pm.environment.unset(\"zone_id\");",
                  "    ",
                  "    recordsLength = jsonData[0].result.records.length;",
                  "    ",
                  "    pm.environment.set(\"zone_id\",jsonData[0].result.records[recordsLength-1].id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "96180ce2-4460-4b3f-ace2-b710b508b7ad",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 16\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "5f23ad68-16c0-43d3-b431-5d525ca3c068",
          "name": "Update Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2e87afa-5685-43e1-aba3-4a082566403a",
                "exec": [
                  "zone_name_EDIT = pm.environment.get(\"zone_name\");",
                  "zone_description_EDIT = pm.environment.get(\"zone_description\");",
                  "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                  "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                  "",
                  "pm.test(\"C77470 Body includes edited zone name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_name_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77470 Body includes edited zone description\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_description_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77470 Body includes edited zone auto offline\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_auto_offline);",
                  "});",
                  "",
                  "pm.test(\"C77470 Body includes edited zone status report\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_current_status_report);",
                  "});",
                  "",
                  "pm.test(\"C77470 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78222 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"updateZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1f827154-1f78-4c81-bf74-fe0d14db46ac",
                "exec": [
                  "zone_name = pm.environment.get(\"zone_name\");",
                  "pm.environment.set(\"zone_name_EDIT\", zone_name + \"EDIT\");",
                  "",
                  "zone_description = pm.environment.get(\"zone_description\");",
                  "pm.environment.set(\"zone_description_EDIT\", zone_description + \"EDIT\");",
                  "",
                  "pm.environment.set(\"zone_auto_offline\", true);",
                  "",
                  "pm.environment.set(\"zone_current_status_report\", false);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"updateZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": \"{{zone_id}}\",\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name_EDIT}}\",\n\t\t\t\t\"auto_offline\": \"{{zone_auto_offline}}\",\n\t\t\t\t\"description\": \"{{zone_description_EDIT}}\",\n\t\t\t\t\"last_updated\": {\n\t\t\t\t\t\"date\": \"2018-06-13 16:53:21.000000\",\n\t\t\t\t\t\"timezone_type\": 3,\n\t\t\t\t\t\"timezone\": \"GMT\"\n\t\t\t\t},\n\t\t\t\t\"last_updated_by\": \"admin\",\n\t\t\t\t\"include_in_current_status_report\": \"{{zone_current_status_report}}\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t},\n\t{\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 16\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "e5c01160-8559-4541-8166-5be838dacfff",
          "name": "Delete Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40d3fee4-2ae4-4d1d-8bd6-25f5d930910a",
                "exec": [
                  "zone_name_EDIT = pm.environment.get(\"zone_name\");",
                  "zone_description_EDIT = pm.environment.get(\"zone_description\");",
                  "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                  "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                  "",
                  "pm.test(\"C77472 Response does not contain deleted zone name\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(zone_name_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77472 Response does not contain deleted zone description\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(zone_description_EDIT);",
                  "});",
                  "",
                  "pm.test(\"C77472 deleteZone gives success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1].result.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C77472 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fe5296d5-0c4b-4241-b91c-9eac5ae7ddb5",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"Zone\",\n    \"method\": \"deleteZone\",\n    \"data\": [\n      {\n        \"id\": \"{{zone_id}}\",\n        \"customer_id\": \"\",\n        \"name\": \"{{zone_name_EDIT}}\",\n        \"auto_offline\": false,\n        \"description\": \"{{zone_description}}\",\n        \"last_updated\": {\n          \"date\": \"2018-06-13 19:01:18.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"last_updated_by\": \"admin\",\n        \"include_in_current_status_report\": true\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 29\n  },\n  {\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 30\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "256bbf33-7102-41aa-b7c3-52566acb4663",
      "name": "Appliances",
      "description": "",
      "item": [
        {
          "_postman_id": "17b82612-b9eb-493f-9823-acfeaf0a053d",
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "    ",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "26cafbef-d4d1-4f24-98d7-d70f2df83f00",
          "name": "Retrieve",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd08c7d1-4426-4be4-ab03-fb43db6a6b68",
                "exec": [
                  "// Parse response body",
                  "var obj = JSON.parse(pm.response.text());",
                  "var record = null;",
                  "",
                  "",
                  "pm.test(\"C77353 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77353 Correct Hostname\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"hostname\\\":\\\"hera.qa.skyline.local\\\"\");",
                  "});",
                  "",
                  "// Find Hera's record to verify model and version",
                  "for (var i = 0; i < obj.result.total; i++) {",
                  "    if (obj.result.records[i].hostname === \"hera.qa.skyline.local\") {",
                  "        record = obj.result.records[i];",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"C77353 Correct Model\", function () {",
                  "    pm.expect(record.model === \"SFS1000\");",
                  "});",
                  "",
                  "sfsVersion = pm.environment.get(\"SfsVersion\");",
                  "pm.test(\"C77353 Correct SFS Version\", function () {",
                  "    pm.expect(record.software_version === sfsVersion);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router/"
          },
          "response": []
        },
        {
          "_postman_id": "31ef6d97-90e1-4357-8dfa-390aef03d939",
          "name": "Create New Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2312f720-db46-4552-a787-b8b1164c658e",
                "exec": [
                  "pm.test(\"Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "zone_name = pm.environment.get(\"zone_name\");",
                  "zone_description = pm.environment.get(\"zone_description\");",
                  "",
                  "pm.test(\"Body has new zone\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_name);",
                  "});",
                  "",
                  "pm.test(\"Body has new zone description\", function () {",
                  "    pm.expect(pm.response.text()).to.include(zone_description);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a3492e1e-1f6a-4614-9556-fca9f9a8dc52",
                "exec": [
                  "pm.environment.unset(\"zone_name\");",
                  "pm.environment.unset(\"zone_description\");",
                  "",
                  "var zone_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var zone_description = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"zone_name\", zone_name);",
                  "pm.environment.set(\"zone_description\", zone_description);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"createZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": null,\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name}}\",\n\t\t\t\t\"auto_offline\": false,\n\t\t\t\t\"description\": \"{{zone_description}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"include_in_current_status_report\": true\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"getZones\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "778d1a13-0717-4c3f-8f87-fe01523d8507",
          "name": "Update SFS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f12aa076-c80a-46f8-9f9e-a834799288ae",
                "exec": [
                  "pm.test(\"C77991 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77991 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"success\\\":true,\\\"message\\\":\\\"Appliance updated\\\"\");",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "73aa30af-f544-4b02-9932-d0eec285f0ac",
                "exec": [
                  "pm.environment.set(\"appliance_pubIP\", \"6.6.6.\" + Math.floor((Math.random() * 1000000) + 1));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"updateAppliance\",\n  \"data\": [\n    {\n      \"status\": \"\",\n      \"hostname\": \"Jennnn-SFS\",\n      \"last_updated\": \"\",\n      \"software_version\": \"1.1.111\",\n      \"contract_renewal_date\": \"\",\n      \"id\": 21,\n      \"public_ip\": \"{{appliance_pubIP}}\",\n      \"has_service_contract\": \"\",\n      \"management_ip\": \"172.0.0.77\",\n      \"username\": \"admin\",\n      \"password\": \"sfs1000\",\n      \"last_updated_by\": \"\",\n      \"total_connections\": \"\",\n      \"license_type\": \"\",\n      \"license_key\": \"\",\n      \"synced\": \"\",\n      \"model\": \"SFS1000\",\n      \"location_name\": \"Test Data Center\",\n      \"zone_name\": \"{{zone_name}}\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 17\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router/",
            "description": "hostname and id need to match an appliance in order to update it."
          },
          "response": []
        },
        {
          "_postman_id": "bd74eff2-c72b-4204-979c-fb517ed25c02",
          "name": "Retrieve Updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1bb5551-2e2d-4947-b918-7c860cb7af47",
                "exec": [
                  "// Parse response body",
                  "var obj = JSON.parse(pm.response.text());",
                  "var record = null;",
                  "",
                  "zone_name = pm.environment.get(\"zone_name\");",
                  "appliance_pubIP = pm.environment.get(\"appliance_pubIP\");",
                  "",
                  "pm.test(\"C77992 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77992 Correct Hostname\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"hostname\\\":\\\"Jennnn-SFS\\\"\");",
                  "});",
                  "",
                  "// Find appliance's record to verify model and version",
                  "for (var i = 0; i < obj.result.total; i++) {",
                  "    if (obj.result.records[i].hostname === \"Jennnn-SFS\") {",
                  "        record = obj.result.records[i];",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"C77992 Correct Public IP\", function () {",
                  "    pm.expect(record.public_ip === appliance_pubIP);",
                  "});",
                  "",
                  "pm.test(\"C77992 Correct Zone\", function () {",
                  "    pm.expect(record.public_ip === zone_name);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router/"
          },
          "response": []
        },
        {
          "_postman_id": "cb94d611-92d0-414c-83ae-637d03d3b756",
          "name": "Delete",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f70ab318-f89d-49be-9cf7-ca8032b0d253",
                "exec": [
                  "pm.test(\"C77360 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77360 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(\"\\\"result\\\":{\\\"success\\\":true\\\"\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"deleteAppliance\",\n  \"data\": [\n    {\n      \"status\": \"\",\n      \"hostname\": \"Jennnn-SFS\",\n      \"last_updated\": \"\",\n      \"software_version\": \"1.1.111\",\n      \"contract_renewal_date\": \"\",\n      \"id\": 21,\n      \"public_ip\": \"6.6.6.6\",\n      \"has_service_contract\": \"\",\n      \"management_ip\": \"172.0.0.77\",\n      \"username\": \"admin\",\n      \"password\": \"sfs1000\",\n      \"last_updated_by\": \"\",\n      \"total_connections\": \"\",\n      \"license_type\": \"\",\n      \"license_key\": \"\",\n      \"synced\": \"\",\n      \"model\": \"SFS1000\",\n      \"location_name\": \"Test Data Center\",\n      \"zone_name\": \"Public\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 18\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router/",
            "description": "I don't know how often we should run this. We only have a limited number of appliances to hook up to our streammanager."
          },
          "response": []
        },
        {
          "_postman_id": "f39a0ac1-c5e9-4400-90d4-c1e024e52066",
          "name": "Check Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "833c2d9d-108d-4e30-b6db-355b0b695f16",
                "exec": [
                  "pm.test(\"C78223 Body does not include deleted appliance\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(\"\\\"hostname\\\": \\\"Jennnn-SFS\\\"\");",
                  "});",
                  "",
                  "pm.test(\"C78223 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router/"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "6226ddca-a008-4c5a-9a10-90e54ff1d21e",
      "name": "API Keys",
      "description": null,
      "item": [
        {
          "_postman_id": "4b9eb684-cda9-4018-a861-17bf64ec0751",
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b88e99b-2738-40ce-a88b-42a2f6a65b93",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "type": "text",
                  "value": "{{user}}"
                },
                {
                  "key": "password",
                  "type": "text",
                  "value": "{{password}}"
                }
              ]
            },
            "url": "http://{{url}}"
          },
          "response": []
        },
        {
          "_postman_id": "d5985e16-efb2-4f65-b885-f39ae5cdcb79",
          "name": "Create New Contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                "exec": [
                  "pm.test(\"Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "contact_name = pm.environment.get(\"contact_name\");",
                  "",
                  "pm.test(\"Body has contact\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_name);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Set up next test",
                  "var obj = pm.response.json();",
                  "var record;",
                  "pm.environment.unset(\"contact_id\");",
                  "for (var i = 0; i < obj[1].result.total; i++) {",
                  "    if (obj[1].result.records[i].first_name == contact_name) {",
                  "        record = obj[1].result.records[i].id;",
                  "    }",
                  "}",
                  "pm.environment.set(\"contact_id\",record);",
                  "console.log(record);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                "exec": [
                  "pm.environment.unset(\"contact_name\");",
                  "pm.environment.unset(\"contact_email\");",
                  "",
                  "var first_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"contact_name\", first_name);",
                  "pm.environment.set(\"contact_email\", email);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"Allemang\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"412-576-8688\",\n\t\t\t\t\"title\": \"adcl\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"dfvfds\",\n\t\t\t\t\"secondary_phone\": \"412-576-8688\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "37d4d664-8499-457e-a0ad-d4cb8d2d956a",
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1181797c-a819-4e06-a600-15bec4595719",
                "exec": [
                  "pm.test(\"C77964 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createApiKey\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "user_key = pm.environment.get(\"user_key\");",
                  "",
                  "pm.test(\"C77964 API Key was created and variables set.\", function () {",
                  "    var obj = JSON.parse(pm.response.text());",
                  "    var record = null;",
                  "    contact_id = pm.environment.get(\"contact_id\");",
                  "",
                  "    for (var i = 0; i < obj[1].result.total; i++){",
                  "        if (obj[1].result.records[i].zone_id == 2 && obj[1].result.records[i].contact_id == contact_id){",
                  "            record = obj[1].result.records[i];",
                  "        }",
                  "    }",
                  "    pm.environment.unset(\"user_key\");",
                  "    pm.environment.set(\"user_key\",record.user_key);",
                  "});",
                  "",
                  "user_key = pm.environment.get(\"user_key\");",
                  "",
                  "pm.test(\"C77964 Body has new key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_key);",
                  "});",
                  "",
                  "pm.test(\"C77964 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77964 API Key list is not empty\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"createApiKey\",\r\n    \"data\": [\r\n      {\r\n        \"user_key\": \"\",\r\n        \"level\": \"\",\r\n        \"date_created\": \"\",\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"primary phone\": \"\",\r\n        \"email address\": \"\",\r\n        \"contact_id\": \"{{contact_id}}\",\r\n        \"zone_name\": \"\",\r\n        \"zone_id\": 2,\r\n        \"id\": null\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 19\r\n  },\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"getApikeys\",\r\n    \"data\": [\r\n      {\r\n        \"page\": 1,\r\n        \"start\": 0,\r\n        \"limit\": 25\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 20\r\n  }\r\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "eb567c1c-671f-4829-a609-7b6f02754479",
          "name": "Retrieve API keys",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a39797-3f6c-410d-a612-37ee0d33f690",
                "exec": [
                  "var obj = JSON.parse(pm.response.text());",
                  "var record = null;",
                  "",
                  "contact_id = pm.environment.get(\"contact_id\");",
                  "",
                  "for (var i = 0; i < obj.result.total; i++){",
                  "    if (obj.result.records[i].zone_id == 2 && obj.result.records[i].contact_id == contact_id){",
                  "        record = obj.result.records[i];",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"C78005 Correct Zone\", function () {",
                  "    pm.expect(record.zone_name === \"SSL VPN\");",
                  "});",
                  "",
                  "pm.test(\"C78005 Correct Contact\", function () {",
                  "    pm.expect(record.first_name === \"Bertha\");",
                  "    pm.expect(record.last_name === \"Shakira\");",
                  "});",
                  "",
                  "pm.test(\"C78005 Response record contains an API key\", function () {",
                  "    pm.expect(record.user_key!==null);",
                  "});",
                  "",
                  "pm.environment.unset(\"user_API_Key\");",
                  "pm.environment.set(\"user_API_Key\", record.user_key);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"ApiKey\",\n\t\"method\": \"getApikeys\",\n\t\"data\": [\n\t  {\n\t    \"page\": 1,\n\t    \"start\": 0,\n\t    \"limit\": 25\n\t  }\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 20\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all the API keys."
          },
          "response": []
        },
        {
          "_postman_id": "c14c9d11-6088-40e3-aa52-ff7f23942e55",
          "name": "GetAll streams - Only Streams from Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                "exec": [
                  "pm.test(\"C78006 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78006 Body is JSON format\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test(\"C78006 Streams in API Zone received\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"test_stream_cam_to_multiple_sfs\");",
                  "});",
                  "",
                  "pm.test(\"C78006 Streams not in API Zone are not received\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(\"stream_1012\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_API_Key}}&format=json",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_API_Key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
          },
          "response": []
        },
        {
          "_postman_id": "838ac33b-be92-489c-a6e4-66995ca46496",
          "name": "Delete API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4f9c766-fe9c-4c3a-a7e5-b171779af845",
                "exec": [
                  "user_key = pm.environment.get(\"user_API_Key\");",
                  "",
                  "pm.test(\"C77967 Response does not contain deleted key\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(user_key);",
                  "});",
                  "",
                  "pm.test(\"C77967 deleteApiKey gives success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1].result.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C77967 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77967 Api key was deleted\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(user_key);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"deleteApiKey\",\n    \"data\": [\n      {\n        \"user_key\": \"{{user_API_Key}}\",\n        \"level\": 10,\n        \"date_created\": {\n          \"date\": \"2018-07-02 18:13:32.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"first_name\": \"DOT\",\n        \"last_name\": \"Government\",\n        \"primary phone\": \"\",\n        \"email address\": \"\",\n        \"contact_id\": 1,\n        \"zone_name\": \"Public\",\n        \"zone_id\": 1,\n        \"id\": null\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 23\n  },\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 24\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "deletes an api key"
          },
          "response": []
        },
        {
          "_postman_id": "6aec071e-5b87-4a8b-a5fe-f8a0f8f15702",
          "name": "GetAll Steams - No Streams From Deleted API Key's Zone",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                "exec": [
                  "pm.test(\"C78007 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78007 Body is JSON format\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test(\"C78007 Streams in deleted API key's Zone not received\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(\"test_stream_cam_to_multiple_sfs\");",
                  "});",
                  "",
                  "pm.test(\"C78007 Streams not in deleted API key's Zone are not received\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(\"stream_1012\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_API_Key}}&format=json",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_API_Key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "c4343393-06b1-440c-b256-83acd8b55209",
      "name": "GetAll Calls",
      "description": null,
      "item": [
        {
          "_postman_id": "ca98f504-1535-4ac2-be2c-bfd4418183b9",
          "name": "Create New Contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                "exec": [
                  "pm.test(\"Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "contact_name = pm.environment.get(\"contact_name\");",
                  "",
                  "pm.test(\"Body has contact\", function () {",
                  "    pm.expect(pm.response.text()).to.include(contact_name);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Set up next test",
                  "var obj = pm.response.json();",
                  "console.log(contact_name);",
                  "console.log(obj);",
                  "var record;",
                  "pm.environment.unset(\"contact_id\");",
                  "for (var i = 0; i < obj[1].result.total; i++) {",
                  "    if (obj[1].result.records[i].first_name == contact_name) {",
                  "        record = obj[1].result.records[i].id;",
                  "    }",
                  "}",
                  "pm.environment.set(\"contact_id\",record);",
                  "console.log(record);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                "exec": [
                  "pm.environment.unset(\"contact_name\");",
                  "pm.environment.unset(\"contact_email\");",
                  "",
                  "var first_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"contact_name\", first_name);",
                  "pm.environment.set(\"contact_email\", email);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"Allemang\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"412-576-8688\",\n\t\t\t\t\"title\": \"adcl\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"dfvfds\",\n\t\t\t\t\"secondary_phone\": \"412-576-8688\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "bea9d7b8-6178-4887-9703-ede4cde63f5b",
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1181797c-a819-4e06-a600-15bec4595719",
                "exec": [
                  "pm.test(\" Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createApiKey\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "user_key = pm.environment.get(\"user_key\");",
                  "",
                  "pm.test(\" API Key was created and variables set.\", function () {",
                  "    var obj = JSON.parse(pm.response.text());",
                  "    var record = null;",
                  "    contact_id = pm.environment.get(\"contact_id\");",
                  "",
                  "    for (var i = 0; i < obj[1].result.total; i++){",
                  "        if (obj[1].result.records[i].zone_id == 2 && obj[1].result.records[i].contact_id == contact_id){",
                  "            record = obj[1].result.records[i];",
                  "        }",
                  "    }",
                  "    pm.environment.unset(\"user_key\");",
                  "    pm.environment.set(\"user_key\",record.user_key);",
                  "});",
                  "",
                  "user_key = pm.environment.get(\"user_key\");",
                  "",
                  "pm.test(\" Body has new key\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_key);",
                  "});",
                  "",
                  "pm.test(\" Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\" API Key list is not empty\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"createApiKey\",\r\n    \"data\": [\r\n      {\r\n        \"user_key\": \"\",\r\n        \"level\": \"\",\r\n        \"date_created\": \"\",\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"primary phone\": \"\",\r\n        \"email address\": \"\",\r\n        \"contact_id\": \"{{contact_id}}\",\r\n        \"zone_name\": \"\",\r\n        \"zone_id\": 2,\r\n        \"id\": null\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 19\r\n  },\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"getApikeys\",\r\n    \"data\": [\r\n      {\r\n        \"page\": 1,\r\n        \"start\": 0,\r\n        \"limit\": 25\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 20\r\n  }\r\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router"
          },
          "response": []
        },
        {
          "_postman_id": "35123bc1-336d-42b1-9258-aa3bab89addf",
          "name": "GetAll streams in JSON w/Valid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                "exec": [
                  "pm.test(\"C77938 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77938 Body is JSON format\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_API_Key}}&format=json",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_API_Key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
          },
          "response": []
        },
        {
          "_postman_id": "1adbb8ea-42ff-47eb-88da-b9aaaef6bf8c",
          "name": "GetAll streams valid data types",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                "exec": [
                  "// Parse response body",
                  "var obj = JSON.parse(pm.response.text());",
                  "var record = obj.features[0];",
                  "",
                  "version = pm.environment.get(\"version\");",
                  "",
                  "pm.test(\"C78232 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78232 Coordinates are in an array\", function () {",
                  "    pm.expect(record.geometry.coordinates[0]).to.not.be.undefined;",
                  "    pm.expect(record.geometry.coordinates[1]).to.not.be.undefined;",
                  "});",
                  "",
                  "pm.test(\"C78232 Active field is a bool\", function () {",
                  "    pm.expect(record.properties.active).to.be.a('boolean');",
                  "});",
                  "",
                  "pm.test(\"C78232 urls are strings\", function () {",
                  "    pm.expect(record.properties.clsp_url).to.be.a('string');",
                  "    pm.expect(record.properties.clsps_url).to.be.a('string');",
                  "    ",
                  "    pm.expect(record.properties.https_url).to.be.a('string');",
                  "    ",
                  "    pm.expect(record.properties.rtmp_url).to.be.a('string');",
                  "    pm.expect(record.properties.rtsp_url).to.be.a('string');",
                  "    ",
                  "    if (version == 5.0)",
                  "        pm.expect(record.properties.ios_url).to.be.a('string');",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"C78232 Metadata are strings\", function () {",
                  "    pm.expect(record.properties.description).to.be.a('string');",
                  "    if (version == 1.0)",
                  "        pm.expect(record.properties.deviceid).to.be.a('string');",
                  "    pm.expect(record.properties.direction).to.be.a('string');",
                  "    if (version == 1.0)",
                  "        pm.expect(record.properties.id).to.be.a('string');",
                  "    else",
                  "        pm.expect(record.properties.id).to.be.a('number');",
                  "    pm.expect(record.properties.jurisdiction).to.be.a('string');",
                  "    pm.expect(record.properties.route).to.be.a('string');",
                  "    pm.expect(record.properties.image_url).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_key}}&format=json",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
          },
          "response": []
        },
        {
          "_postman_id": "b27eed06-8f52-4698-a9a5-aa984e015ccb",
          "name": "GetAll streams in JSON w/invalid key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea3a75a4-f547-4351-ac7a-272b17ad4c39",
                "exec": [
                  "pm.test(\"C77939 Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"C77939 Verify invalid API error message is provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"Invalid API Key.\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY=ABC123&format=json",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "ABC123",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab all cameras which can be currently pulled from stream manager with an invalid API key.\n\nexpectation: 403 error"
          },
          "response": []
        },
        {
          "_postman_id": "c5803cab-3801-4bdf-b442-c25f5aaf8f98",
          "name": "GetAll Jsonp format Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d6db7a64-fa64-4c8a-901e-062013b58e54",
                "exec": [
                  "pm.test(\"C77940 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77940 Response has padding\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"callbackFunction(\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_key}}&format=jsonp&callback=callbackFunction",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "jsonp",
                  "equals": true
                },
                {
                  "key": "callback",
                  "value": "callbackFunction",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSONP format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams). The format should be JSONP\n\n"
          },
          "response": []
        },
        {
          "_postman_id": "8af4e95f-c449-4c83-9e33-d3beedab3a1c",
          "name": "GetAll XML format Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce7e6e40-f5bb-41d2-b035-a9ab8219f8cf",
                "exec": [
                  "pm.test(\"C77941 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77941 Body is in XML format\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<xml>\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_key}}&format=xml",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "xml",
                  "equals": true
                }
              ]
            },
            "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in XML format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams). The format should be XML.\n\n"
          },
          "response": []
        },
        {
          "_postman_id": "6c5df2f2-7331-4169-8e7b-d58b59f752ac",
          "name": "GetAll streams in invalid format",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56af97ea-979c-46af-8552-e51286b20569",
                "exec": [
                  "pm.test(\"C77942 Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"C77942 Verify invalid API error message is provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"Invalid Format.\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getAll?X-API-KEY={{user_key}}&format=ABC123",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getAll"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "ABC123",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in a random format (\"1001\"). not a real format and therefore not supported\n\nexpectation: not sure. currently it just returns XML format. i'll put a ticket in or ask someone how it should actually behave."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "4dc8b78c-8a12-4b15-9658-ae3041500d81",
      "name": "Get Lists",
      "description": "get lists of different items/information from stream manager.",
      "item": [
        {
          "_postman_id": "402728fe-fd42-442f-b65b-7f3f8a598464",
          "name": "Get All Contacts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd01da50-638a-4d06-ac48-355d8066b431",
                "exec": [
                  "pm.test(\"C77972 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 1\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all contacts associated with the stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "4235829f-7bb3-4793-ba14-75317c5bc4d8",
          "name": "Get All Appliances",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "523b5782-12a9-4a8e-8ee7-4bca8c45a8c3",
                "exec": [
                  "pm.test(\"C77973 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\t\"action\": \"Appliance\",\n\t\t\"method\": \"getAppliances\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 2\n\t}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all appliances"
          },
          "response": []
        },
        {
          "_postman_id": "49da746f-18d3-43bd-b1a6-75738b591a5c",
          "name": "Get all issue streams",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3210c158-8837-41a2-97ff-5fbb4016ead3",
                "exec": [
                  "pm.test(\"C77974 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getIssueStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 3\n\t}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all issue streams from stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "3d62cff5-5b31-409d-8113-0c223ce2854b",
          "name": "Get all Locations",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26e22d2e-a6f2-4614-b6da-0e1d0fd512de",
                "exec": [
                  "pm.test(\"C77975 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Location\",\n\t\t\"method\": \"getLocations\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 4\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all locations associated with a stream manager"
          },
          "response": []
        },
        {
          "_postman_id": "d57aa69f-7e53-44d7-bc3a-5bb3be5b6f04",
          "name": "Get all offline sfs streams",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea61cd6c-d14d-4c10-87e0-3545c4079013",
                "exec": [
                  "pm.test(\"C77976 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"Media\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 5\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all offlined sfs streams from stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "21a4517b-1d6c-42bc-8c11-7f25d29b0e74",
          "name": "Get all offlined streams no media flag",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a52af66e-6564-479f-85fc-78e49c204817",
                "exec": [
                  "pm.test(\"C77977 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 6\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "This technically has its own TID. Im not really sure how much it differs from Get all offline sfs streams. The only difference is that there is no type: media property in this one."
          },
          "response": []
        },
        {
          "_postman_id": "02f5a871-ba24-4a03-a052-ef6af18c27b6",
          "name": "Get  sfs capacity",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b1669e5-c2f8-449d-a1f3-7e2a4eca6d9d",
                "exec": [
                  "pm.test(\"C77978 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Capacity\",\n\t\t\"method\": \"getSfsCapacity\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 7\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "Returns a list of connected appliances and their current connections and streamcount."
          },
          "response": []
        },
        {
          "_postman_id": "f13276e8-4a59-42ff-b7a3-542a287afa64",
          "name": "Get all offline streams SSL VPN",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9c63487-9f93-4637-98c1-71cf367ceb72",
                "exec": [
                  "pm.test(\"C77979 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"SSL VPN\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 8\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "offline appliace = SSL VPN"
          },
          "response": []
        },
        {
          "_postman_id": "477bab87-ff96-48a9-8c1c-e55e702ffa20",
          "name": "Get all streams",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7abfae09-2dc8-421e-a8c0-32b99e03a824",
                "exec": [
                  "pm.test(\"C77980 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getGrid\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 9\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a list of all streams (grid)"
          },
          "response": []
        },
        {
          "_postman_id": "ed9900a4-1a16-41d4-99af-b54ee176062a",
          "name": "Get all users",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db8bbf11-03dd-43d1-8612-7215cafecab6",
                "exec": [
                  "pm.test(\"C77981 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
          },
          "response": []
        },
        {
          "_postman_id": "545f552a-c546-45c0-9892-97f749721381",
          "name": "Get all zones",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41b1a442-474c-42c5-a538-eb588d29a1a7",
                "exec": [
                  "pm.test(\"C77982 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"getZones\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 11\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "Gets a list of all zones in stream manager"
          },
          "response": []
        },
        {
          "_postman_id": "c06d7157-8047-4b86-b11d-4a798e874509",
          "name": "Get Stream Map",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5b299d5-3abd-42ad-89b8-cb71210d6735",
                "exec": [
                  "//this API gets information for stream test_stream_alpha, which has a metadata_id of 1",
                  "",
                  "pm.test(\"C77983 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getStreamMap\",\n\t\"data\": [\n\t\t{\n\t\t\t\"metadataId\": {{metadata_id}}\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 17\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "gets a stream map of a test stream based on its metadata_id"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "2f772db1-d93d-4948-b616-6fab453c0ba1",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "7388327a-7e65-48b9-bd99-48f68fa09ab0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "0d99da64-9bc5-40a7-a9fa-fcd28e7f797e",
      "name": "Stream Metadata",
      "description": "API tests for streams tab for operators",
      "item": [
        {
          "_postman_id": "b96bce6e-4ea8-4126-9243-e97612ab0743",
          "name": "Login Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11710913-2121-4ef0-9792-ed8db549290c",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "    ",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": "http://{{url}}",
            "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
          },
          "response": []
        },
        {
          "_postman_id": "b65aceb1-878b-4b9f-8e95-ed0b8b60ae71",
          "name": "Create Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                "exec": [
                  "pm.test(\"C77999 Verify admin can edit stream metadata\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                  "});",
                  "",
                  "pm.environment.set(\"variable_key\", \"variable_value\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                "exec": [
                  "pm.environment.set(\"stream_extTID\", \"31\");",
                  "// This ID is the id that is associated with the stream's metadata",
                  "pm.environment.set(\"stream_id\", \"6\");",
                  "pm.environment.set(\"stream_description\", \"test_stream_cam_to_multiple_sfs\");",
                  "pm.environment.set(\"stream_jurisdiction\", \"test jurisdiction\");",
                  "pm.environment.set(\"stream_route_name\", \"test route\");",
                  "pm.environment.set(\"stream_milemarker\", \"66\");",
                  "pm.environment.set(\"stream_traffic_direction\", \"S\");",
                  "pm.environment.set(\"stream_latitude\", \"50\");",
                  "pm.environment.set(\"stream_longitude\", \"51\");",
                  "pm.environment.set(\"stream_device_id\", \"11536\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "extTID",
                  "type": "text",
                  "value": "{{stream_extTID}}"
                },
                {
                  "key": "extAction",
                  "type": "text",
                  "value": "Streams"
                },
                {
                  "key": "extMethod",
                  "type": "text",
                  "value": "updateMetadata"
                },
                {
                  "key": "extType",
                  "type": "text",
                  "value": "rpc"
                },
                {
                  "key": "extUpload",
                  "type": "text",
                  "value": "false"
                },
                {
                  "key": "id",
                  "type": "text",
                  "value": "{{stream_id}}"
                },
                {
                  "key": "description",
                  "type": "text",
                  "value": "{{stream_description}}"
                },
                {
                  "key": "jurisdiction",
                  "type": "text",
                  "value": "{{stream_jurisdiction}}"
                },
                {
                  "key": "route_name",
                  "type": "text",
                  "value": "{{stream_route_name}}"
                },
                {
                  "key": "mile_marker",
                  "type": "text",
                  "value": "{{stream_milemarker}}"
                },
                {
                  "key": "traffic_direction",
                  "type": "text",
                  "value": "{{stream_traffic_direction}}"
                },
                {
                  "key": "latitude",
                  "type": "text",
                  "value": "{{stream_latitude}}"
                },
                {
                  "key": "longitude",
                  "type": "text",
                  "value": "{{stream_longitude}}"
                },
                {
                  "key": "deviceid",
                  "type": "text",
                  "value": "{{stream_device_id}}"
                }
              ]
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
          },
          "response": []
        },
        {
          "_postman_id": "36ce4a08-8e54-40cb-9f11-174d87923a5b",
          "name": "Read Created Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                "exec": [
                  "stream_id = pm.environment.get(\"stream_id\");",
                  "stream_description = pm.environment.get(\"stream_description\");",
                  "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction\");",
                  "stream_route_name = pm.environment.get(\"stream_route_name\");",
                  "stream_milemarker = pm.environment.get(\"stream_milemarker\");",
                  "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction\");",
                  "stream_latitude = pm.environment.get(\"stream_latitude\");",
                  "stream_longitude = pm.environment.get(\"stream_longitude\");",
                  "",
                  "pm.test(\"C78000 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78000 Success message present\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                  "});",
                  "",
                  "pm.test(\"C78000 Created Metadata was saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"{\\\"id\\\":\" + stream_id + \",\\\"description\\\":\\\"\" + stream_description + \"\\\",\\\"jurisdiction\\\":\\\"\" + stream_jurisdiction + \"\\\",\\\"traffic_direction\\\":\\\"\" + stream_traffic_direction + \"\\\",\\\"route_name\\\":\\\"\" + stream_route_name + \"\\\",\\\"mile_marker\\\":\" + stream_milemarker + \",\\\"latitude\\\":\" + stream_latitude + \",\\\"longitude\\\":\" + stream_longitude);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "returns a list of camera streams (camera grid)"
          },
          "response": []
        },
        {
          "_postman_id": "0aafc9c7-0beb-4939-ae4c-f19392391141",
          "name": "Edit Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                "exec": [
                  "pm.test(\"C78001 Verify admin can edit stream metadata\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                "exec": [
                  "stream_description = pm.environment.get(\"stream_description\");",
                  "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction\");",
                  "stream_route_name = pm.environment.get(\"stream_route_name\");",
                  "",
                  "pm.environment.set(\"stream_description_EDIT\", stream_description + \"EDIT\");",
                  "pm.environment.set(\"stream_jurisdiction_EDIT\", stream_jurisdiction + \"EDIT\");",
                  "pm.environment.set(\"stream_route_name_EDIT\", stream_route_name + \"EDIT\");",
                  "pm.environment.set(\"stream_milemarker_EDIT\", \"11\");",
                  "pm.environment.set(\"stream_traffic_direction_EDIT\", \"NE\");",
                  "pm.environment.set(\"stream_latitude_EDIT\", \"20\");",
                  "pm.environment.set(\"stream_longitude_EDIT\", \"21\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "extTID",
                  "type": "text",
                  "value": "{{stream_extTID}}"
                },
                {
                  "key": "extAction",
                  "type": "text",
                  "value": "Streams"
                },
                {
                  "key": "extMethod",
                  "type": "text",
                  "value": "updateMetadata"
                },
                {
                  "key": "extType",
                  "type": "text",
                  "value": "rpc"
                },
                {
                  "key": "extUpload",
                  "type": "text",
                  "value": "false"
                },
                {
                  "key": "id",
                  "type": "text",
                  "value": "{{stream_id}}"
                },
                {
                  "key": "description",
                  "type": "text",
                  "value": "{{stream_description_EDIT}}"
                },
                {
                  "key": "jurisdiction",
                  "type": "text",
                  "value": "{{stream_jurisdiction_EDIT}}"
                },
                {
                  "key": "route_name",
                  "type": "text",
                  "value": "{{stream_route_name_EDIT}}"
                },
                {
                  "key": "mile_marker",
                  "type": "text",
                  "value": "{{stream_milemarker_EDIT}}"
                },
                {
                  "key": "traffic_direction",
                  "type": "text",
                  "value": "{{stream_traffic_direction_EDIT}}"
                },
                {
                  "key": "latitude",
                  "type": "text",
                  "value": "{{stream_latitude_EDIT}}"
                },
                {
                  "key": "longitude",
                  "type": "text",
                  "value": "{{stream_longitude_EDIT}}"
                },
                {
                  "key": "deviceid",
                  "type": "text",
                  "value": "{{stream_device_id}}"
                }
              ]
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
          },
          "response": []
        },
        {
          "_postman_id": "8e072b59-f940-4228-93ae-b695e88c4af4",
          "name": "Read Updated Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                "exec": [
                  "stream_id = pm.environment.get(\"stream_id\");",
                  "stream_description = pm.environment.get(\"stream_description_EDIT\");",
                  "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction_EDIT\");",
                  "stream_route_name = pm.environment.get(\"stream_route_name_EDIT\");",
                  "stream_milemarker = pm.environment.get(\"stream_milemarker_EDIT\");",
                  "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction_EDIT\");",
                  "stream_latitude = pm.environment.get(\"stream_latitude_EDIT\");",
                  "stream_longitude = pm.environment.get(\"stream_longitude_EDIT\");",
                  "",
                  "pm.test(\"C78002 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78002 Success message present\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                  "});",
                  "",
                  "pm.test(\"C78002 Updated Metadata was saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"{\\\"id\\\":\" + stream_id + \",\\\"description\\\":\\\"\" + stream_description + \"\\\",\\\"jurisdiction\\\":\\\"\" + stream_jurisdiction + \"\\\",\\\"traffic_direction\\\":\\\"\" + stream_traffic_direction + \"\\\",\\\"route_name\\\":\\\"\" + stream_route_name + \"\\\",\\\"mile_marker\\\":\" + stream_milemarker + \",\\\"latitude\\\":\" + stream_latitude + \",\\\"longitude\\\":\" + stream_longitude);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "returns a list of camera streams (camera grid)"
          },
          "response": []
        },
        {
          "_postman_id": "96e1f791-8b32-4c8a-8d58-6cd6f93e5e82",
          "name": "Delete Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                "exec": [
                  "pm.test(\"C78003 Verify admin can edit stream metadata\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "extTID",
                  "type": "text",
                  "value": "{{stream_extTID}}"
                },
                {
                  "key": "extAction",
                  "type": "text",
                  "value": "Streams"
                },
                {
                  "key": "extMethod",
                  "type": "text",
                  "value": "updateMetadata"
                },
                {
                  "key": "extType",
                  "type": "text",
                  "value": "rpc"
                },
                {
                  "key": "extUpload",
                  "type": "text",
                  "value": "false"
                },
                {
                  "key": "id",
                  "type": "text",
                  "value": "{{stream_id}}"
                },
                {
                  "key": "description",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "jurisdiction",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "route_name",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "mile_marker",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "traffic_direction",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "latitude",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "longitude",
                  "type": "text",
                  "value": ""
                },
                {
                  "key": "deviceid",
                  "type": "text",
                  "value": "{{stream_device_id}}"
                }
              ]
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
          },
          "response": []
        },
        {
          "_postman_id": "b49faca6-9fb8-496f-a6f6-b8db8726b9f9",
          "name": "Read Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                "exec": [
                  "stream_id = pm.environment.get(\"stream_id\");",
                  "stream_description = pm.environment.get(\"stream_description_EDIT\");",
                  "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction_EDIT\");",
                  "stream_route_name = pm.environment.get(\"stream_route_name_EDIT\");",
                  "stream_milemarker = pm.environment.get(\"stream_milemarker_EDIT\");",
                  "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction_EDIT\");",
                  "stream_latitude = pm.environment.get(\"stream_latitude_EDIT\");",
                  "stream_longitude = pm.environment.get(\"stream_longitude_EDIT\");",
                  "",
                  "pm.test(\"C78004 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C78004 Success message present\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                  "});",
                  "",
                  "pm.test(\"C78004 Deleted Metadata was saved\", function () {",
                  "    pm.expect(pm.response.text()).to.include('\"id\":'+stream_id+',\"description\":\"\",\"jurisdiction\":\"\",\"traffic_direction\":\"\",\"route_name\":\"\",\"mile_marker\":0,\"latitude\":0,\"longitude\":0');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "returns a list of camera streams (camera grid)"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "42c2c41d-89b0-4991-b290-092d7b8b96ed",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "6d091680-5217-4c72-9243-2297364fc021",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "e7b754c1-ed2d-44f7-aa1d-4d32b611d586",
      "name": "getByBounds Calls",
      "description": null,
      "item": [
        {
          "_postman_id": "825d99d0-8a93-4930-937e-357ede9fb7b4",
          "name": "getByBounds Json Format, Valid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76cbfd0e-8e2b-42b1-8099-3447a6371de0",
                "exec": [
                  "pm.test(\"C77956 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77956 Body is JSON format\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=13&lng=40&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "13",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "40",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in Json format with a valid API key. \n\nexpectation: return list of cameras in json format."
          },
          "response": []
        },
        {
          "_postman_id": "01423f7d-263c-4a50-bcf8-96cc00fc1f99",
          "name": "getByBounds Json Format, Invalid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d73228b-3eb2-4a76-ab7f-4a8b0f90d9d8",
                "exec": [
                  "pm.test(\"C77957 Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"C77957 Verify invalid API error message is provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"Invalid API Key.\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY=ABC123&format=json&lat=33&lng=33&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "ABC123",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab all cameras which can be currently pulled from stream manager with an invalid API key.\n\nexpectation: 403 error"
          },
          "response": []
        },
        {
          "_postman_id": "ff9965ba-a131-49f8-bf94-f5c3e05ddb25",
          "name": "getByBounds JsonP Format, Valid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7a87241-8255-4da7-8972-53e88ceacb48",
                "exec": [
                  "pm.test(\"C77958 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=jsonp&lat=33&lng=33&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "jsonp",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in JSONP format. \n\nexpectation: return cameras in JSONP format."
          },
          "response": []
        },
        {
          "_postman_id": "6073a274-90a0-4691-be7d-b68a3d8dbe7c",
          "name": "getByBounds XML Format, Valid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "070d143d-35f2-4a24-84a4-6875ed240ba5",
                "exec": [
                  "pm.test(\"C77959 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77959 Body is in XML format\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"<xml>\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=xml&lat=33&lng=33&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "xml",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in XML format. \n\nexpectation: return XML list of cameras."
          },
          "response": []
        },
        {
          "_postman_id": "756af524-c0da-4029-8d47-2affd0bcca9b",
          "name": "getByBounds Invalid Format, Valid Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5aee534c-eefb-40b6-b224-d2f43eaf2747",
                "exec": [
                  "pm.test(\"C77960 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=ABC123&lat=33&lng=33&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "ABC123",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in a random format (\"ABC123\"). not a real format and therefore not supported\n\nexpectation: not sure. currently it just returns XML format. i'll put a ticket in or ask someone how it should actually behave."
          },
          "response": []
        },
        {
          "_postman_id": "787a56e1-a190-463f-a2ef-0734e7226d0d",
          "name": "getByBounds Invalid Lat/Longs",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a6aaa2a-16b7-4a71-85c0-51fe82b99c00",
                "exec": [
                  "pm.test(\"C77961 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=AB&lng=CD&radius=1000&active=1",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "AB",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "CD",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "1",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras in json format but provides bogus data to long/lat\n\nexpectation: still returns, just based on a long lat of 0,0... maybe we should provide an error message instead."
          },
          "response": []
        },
        {
          "_postman_id": "46fbec71-e6ef-44ee-a0c6-1e993bdedd4c",
          "name": "getByBounds Find Inactive Cameras",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77be54ce-3ab1-4200-9794-b625e84a993e",
                "exec": [
                  "pm.test(\"C77962 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C77962 Body just has empty Feature Collection\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"FeatureCollection\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{url}}/{{version}}/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=33&lng=33&radius=1000&active=0",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "{{version}}",
                "streams",
                "getByBounds"
              ],
              "query": [
                {
                  "key": "X-API-KEY",
                  "value": "{{user_key}}",
                  "equals": true
                },
                {
                  "key": "format",
                  "value": "json",
                  "equals": true
                },
                {
                  "key": "lat",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "lng",
                  "value": "33",
                  "equals": true
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "equals": true
                },
                {
                  "key": "active",
                  "value": "0",
                  "equals": true
                }
              ]
            },
            "description": "description: attempts to grab cameras with active marked as 0\n\nexpectation: not sure. so far i have never had results returned for this. so i'm not sure what the point is of specifying this flag."
          },
          "response": []
        },
        {
          "_postman_id": "0497e021-d11c-4993-a036-ec34bbdd9c4a",
          "name": "Delete API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4f9c766-fe9c-4c3a-a7e5-b171779af845",
                "exec": [
                  "user_key = pm.environment.get(\"user_key\");",
                  "",
                  "pm.test(\"Response does not contain deleted key\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(user_key);",
                  "});",
                  "",
                  "pm.test(\"deleteApiKey gives success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1].result.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Api key was deleted\", function () {",
                  "    pm.expect(pm.response.text()).to.not.include(user_key);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"deleteApiKey\",\n    \"data\": [\n      {\n        \"user_key\": \"{{user_key}}\",\n        \"level\": 10,\n        \"date_created\": {\n          \"date\": \"2018-07-02 18:13:32.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"first_name\": \"DOT\",\n        \"last_name\": \"Government\",\n        \"primary phone\": \"\",\n        \"email address\": \"\",\n        \"contact_id\": 1,\n        \"zone_name\": \"Public\",\n        \"zone_id\": 1,\n        \"id\": null\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 23\n  },\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 24\n  }\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "deletes an api key"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "90abc286-e304-4598-96c1-1326eccf8113",
      "name": "Create operator",
      "description": "This workflow will create a reliable operator user that can run the operator tests.",
      "item": [
        {
          "_postman_id": "cc22f8b1-f824-4d78-865f-52519f22ee64",
          "name": "Login Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "923e4442-af3e-420e-8e53-c425c1c8bab9",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": "http://{{url}}",
            "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
          },
          "response": []
        },
        {
          "_postman_id": "1b426d01-942f-47a2-961c-0ff422c48991",
          "name": "Create Operator",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26b6c30f-c56b-42b6-96c5-336163e50673",
                "exec": [
                  "pm.test(\"User was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    pm.environment.unset(\"user_ID\");",
                  "    pm.environment.unset(\"user_name\");",
                  "    pm.environment.set(\"user_ID\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                  "    pm.environment.set(\"user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                  "});",
                  "",
                  "pm.test(\"Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "user_email = pm.environment.get(\"user_email\");",
                  "",
                  "pm.test(\"Body has email\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                "exec": [
                  "pm.environment.unset(\"user_name\");",
                  "pm.environment.unset(\"user_email\");",
                  "",
                  "var user_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var user_email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"user_name\", user_name);",
                  "pm.environment.set(\"user_email\", user_email+\"@gmail.com\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": 0,\n\t\t\t\t\"username\": \"User {{$timestamp}}\",\n\t\t\t\t\"password\": \"skyl1n3!\",\n\t\t\t\t\"personal_name\": \"PName\",\n\t\t\t\t\"email\": \"{{user_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": false\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "creates an admin user in stream manager."
          },
          "response": []
        },
        {
          "_postman_id": "4b959215-f6b9-40b5-abe1-0ef0a7dcbb90",
          "name": "Create Admin User So we can actually do things.",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ee086e9b-758c-4f73-b785-b307f28d6c73",
                "exec": [
                  "pm.test(\"C77441 User was created and variables set.\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total) !== null;",
                  "    pm.environment.unset(\"user_ID\");",
                  "    pm.environment.unset(\"user_name\");",
                  "    pm.environment.set(\"user_ID\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                  "    pm.environment.set(\"user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                  "});",
                  "",
                  "pm.test(\"C77441 Body shows success message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                  "});",
                  "",
                  "user_email = pm.environment.get(\"user_email\");",
                  "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                  "",
                  "pm.test(\"C77441 Body has email\", function () {",
                  "    pm.expect(pm.response.text()).to.include(user_email);",
                  "});",
                  "",
                  "pm.test(\"C77441 Body has personal name\", function () {",
                  "    pm.expect(pm.response.text()).to.include(admin_personal_name);",
                  "});",
                  "",
                  "pm.test(\"C77441 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                "exec": [
                  "pm.environment.unset(\"user_name\");",
                  "pm.environment.unset(\"user_email\");",
                  "",
                  "var user_name = Math.floor((Math.random() * 1000000) + 1);",
                  "var user_email = Math.floor((Math.random() * 1000000) + 1);",
                  "",
                  "pm.environment.set(\"user_name\", user_name);",
                  "pm.environment.set(\"user_email\", user_email+\"@gmail.com\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": 0,\n\t\t\t\t\"username\": \"User {{$timestamp}}\",\n\t\t\t\t\"password\": \"{{admin_password}}\",\n\t\t\t\t\"personal_name\": \"{{admin_personal_name}}\",\n\t\t\t\t\"email\": \"{{user_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": true\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
            },
            "url": "http://{{url}}/{{version}}/direct/router",
            "description": "creates an admin user in stream manager."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "1526d2a2-2fc1-4a7a-ad62-0cc1af01ccbb",
        "type": "text/javascript",
        "exec": [
          "",
          "var JSONtoCompare = {",
          "            \"type\": \"Feature\",",
          "            \"geometry\": {",
          "                \"coordinates\": [",
          "                    33,",
          "                    33",
          "                ],",
          "                \"type\": \"Point\"",
          "            },",
          "            \"properties\": {",
          "                \"direction\": \"\",",
          "                \"mrm\": 0,",
          "                \"id\": 42,",
          "                \"jurisdiction\": \"\",",
          "                \"route\": \"\",",
          "                \"description\": \"I-66/MM69/WB/Exit69,NorthSycamoreSt\",",
          "                \"deviceid\": \"\",",
          "                \"rtmp_url\": \"rtmp://:1935/rtplive/FairfaxVideo0330\",",
          "                \"ios_url\": \"http://:1935/rtplive/FairfaxVideo0330/playlist.m3u8\",",
          "                \"rtsp_url\": \"rtsp:///rtplive/FairfaxVideo0330\",",
          "                \"image_url\": \"http://imageserver.example.com/thumbs/FairfaxVideo0330.flv.png\",",
          "                \"active\": true",
          "            }",
          "        }",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "73aeb72d-ee0b-4c20-9aff-8078308dd86f",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}