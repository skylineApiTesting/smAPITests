{
  "info": {
    "_postman_id": "114028fd-8908-4e50-8e9e-eb0d28d364c6",
    "name": "Stream_Manager",
    "description": "This collection contains tests for stream manager APIs to run as an admin user.\n\nDocumentation for stream manager APIs can be found on 172.28.12.54/docs",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "eeef8aa8-f348-455c-90d3-67e73b20be48",
      "name": "Backend",
      "description": "",
      "item": [
        {
          "_postman_id": "6150e599-9e87-4f1d-a3a2-345fdc553eb3",
          "name": "Admin",
          "description": "",
          "item": [
            {
              "_postman_id": "e8532a47-3a7c-4aa8-8e40-272df9624fbd",
              "name": "Login",
              "description": null,
              "item": [
                {
                  "_postman_id": "4ed3eb3a-add4-4d44-a552-434af233c843",
                  "name": "Invalid Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e0608f42-6650-4b53-9a34-6dd313ef6af9",
                        "exec": [
                          "pm.test(\"C127504 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127504 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127504 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "wrongPassword",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "705a745c-26f1-436a-88ba-2120a79c93a0",
                  "name": "Invalid Username",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3f390d2f-ddeb-4ce0-a2a3-8bbdaa376370",
                        "exec": [
                          "pm.test(\"C127505 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127505 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127505 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "wrongUser",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{admin_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "8fe46d5a-dd0d-4ed3-9687-a5392ef896cb",
                  "name": "Correct Username, Incorrect Password Case",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4d4a7612-de72-4220-92b4-8fd9d766f259",
                        "exec": [
                          "pm.test(\"C127506 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127506 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127506 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "SM1000",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "a8a6312d-4fa9-434d-a7f3-d8db0787441c",
                  "name": "Empty Fields",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "cdf83a48-2d7c-43ee-a1dd-8fcb13cfbb95",
                        "exec": [
                          "pm.test(\"C127501 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127501 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127501 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "cb5a94a1-bcbf-46fa-9c54-3f8c565bdcfd",
                  "name": "Empty Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1c1fbaef-b26d-431f-96d2-ea393aca93ba",
                        "exec": [
                          "pm.test(\"C127502 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127502 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127502 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "6f3d140b-486c-47ad-996e-3fdef2753e14",
                  "name": "Empty Username",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b005cd07-393e-4d33-b1dc-e141d3b7ae7f",
                        "exec": [
                          "pm.test(\"C127503 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127503 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127503 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{admin_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "ba877c17-83ab-4566-840e-e97818d1a9ad",
                  "name": "Wrong Username Case, Correct Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "66c1c821-2ce2-40ec-b411-56ffbbdb5ee8",
                        "exec": [
                          "pm.test(\"C127510 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127510 Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "ADMIN",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{admin_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "2533d955-076f-42a1-a32d-47c1fc17c2c6",
                  "name": "Logout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a4a9eb4d-86f2-40f4-9f83-c26106d731b6",
                        "exec": [
                          "pm.test(\"C127509 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127509 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d1236ce2-ae6b-4d43-be68-6d5cb8cf69d1",
                  "name": "Username Password Swapped",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8449b7ee-930f-4930-ae91-90a0804ce2f1",
                        "exec": [
                          "pm.test(\"C127507 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127507 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127507 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "password",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "user",
                          "value": "{{admin_password}}",
                          "description": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "43e3d9b9-f6e5-4228-9499-a792ea537db4",
                  "name": "Login Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c4858c6f-531a-44db-851c-98bdbc5d47eb",
                        "exec": [
                          "pm.test(\"C127508 Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{admin_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}",
                    "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "054f740c-5112-4ec1-8b5a-2bce0dc21370",
              "name": "User",
              "description": "User section of Stream Manager\n",
              "item": [
                {
                  "_postman_id": "0d063dd9-a996-48a2-8ef1-ce4489a6a6f6",
                  "name": "Create Admin User",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ee086e9b-758c-4f73-b785-b307f28d6c73",
                        "exec": [
                          "new_admin_user_email = pm.environment.get(\"new_admin_user_email\");",
                          "new_admin_personal_name = pm.environment.get(\"new_admin_personal_name\");",
                          "user_name = pm.environment.get(\"user_name\");",
                          "",
                          "pm.test(\"C127548 User was created and variables set.\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "    pm.environment.unset(\"user_ID\");",
                          "    pm.environment.set(\"user_ID\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                          "});",
                          "",
                          "pm.test(\"C127548 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127548 Body has email\", function () {",
                          "    pm.expect(pm.response.text()).to.include(new_admin_user_email);",
                          "});",
                          "",
                          "pm.test(\"C127548 Body has personal name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(new_admin_personal_name);",
                          "});",
                          "",
                          "pm.test(\"C127548 Body has username\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_name);",
                          "});",
                          "",
                          "pm.test(\"C127548 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                        "exec": [
                          "pm.environment.set(\"user_name\", \"callemang\");",
                          "pm.environment.set(\"new_admin_password\", \"streammanager\");",
                          "pm.environment.set(\"new_admin_personal_name\", \"Christopher\");",
                          "pm.environment.set(\"new_admin_user_email\", \"c.m.allemang@gmail.com\");",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": 0,\n\t\t\t\t\"username\": \"{{user_name}}\",\n\t\t\t\t\"password\": \"{{new_admin_password}}\",\n\t\t\t\t\"personal_name\": \"{{new_admin_personal_name}}\",\n\t\t\t\t\"email\": \"{{new_admin_user_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": true\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "creates an admin user in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "ca496566-077f-4714-aa26-192ed817158b",
                  "name": "Create Operator",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "26b6c30f-c56b-42b6-96c5-336163e50673",
                        "exec": [
                          "pm.test(\"C127549 User was created and variables set.\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "    pm.environment.unset(\"operator_id\");",
                          "    pm.environment.unset(\"operator_user_name\");",
                          "    pm.environment.set(\"operator_id\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                          "    pm.environment.set(\"operator_user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                          "});",
                          "",
                          "pm.test(\"C127549 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createUser\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "operator_email = pm.environment.get(\"operator_email\");",
                          "",
                          "pm.test(\"C127549 Body has email\", function () {",
                          "    pm.expect(pm.response.text()).to.include(operator_email);",
                          "});",
                          "",
                          "pm.test(\"C127549 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "48710cc8-7321-4f55-b607-bab44c69a186",
                        "exec": [
                          "pm.environment.unset(\"operator_user_name\");",
                          "pm.environment.unset(\"operator_email\");",
                          "",
                          "pm.environment.set(\"operator_user_name\", \"dbell\");",
                          "pm.environment.set(\"operator_email\", \"dbell@gmail.com\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": \"{{operator_id}}\",\n\t\t\t\t\"username\": \"User {{$timestamp}}\",\n\t\t\t\t\"password\": \"{{operator_password}}\",\n\t\t\t\t\"personal_name\": \"{{operator_personal_name}}\",\n\t\t\t\t\"email\": \"{{operator_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": false\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "creates an admin user in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "ab41e051-4277-426b-aa19-14d36b566bb1",
                  "name": "Retrieve Users",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b873ecaf-b3eb-4cfb-ae8f-4773be5da451",
                        "exec": [
                          "user_email = pm.environment.get(\"user_email\");",
                          "user_name = pm.environment.get(\"user_name\");",
                          "",
                          "pm.test(\"C127552 shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"getUsers\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127552 Body includes user\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_name);",
                          "});",
                          "",
                          "pm.test(\"C127552 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
                  },
                  "response": []
                },
                {
                  "_postman_id": "4da557bc-6fa4-4ca7-9089-f3fa28aac35c",
                  "name": "Update Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                        "exec": [
                          "admin_personal_name_EDIT = pm.environment.get(\"admin_personal_name_EDIT\");",
                          "",
                          "pm.test(\"C127550 Body includes edited edited personal name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(admin_personal_name_EDIT);",
                          "});",
                          "",
                          "user_email_EDIT = pm.environment.get(\"user_email_EDIT\");",
                          "",
                          "pm.test(\"C127550 Response contains edited email address\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_email_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127550 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                        "exec": [
                          "user_email = pm.environment.get(\"user_email\");",
                          "admin_password = pm.environment.get(\"admin_password\");",
                          "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                          "",
                          "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + user_email);",
                          "pm.environment.set(\"admin_password_EDIT\", \"EDIT\" + admin_password);",
                          "pm.environment.set(\"admin_personal_name_EDIT\", \"EDIT\" + admin_personal_name);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{user_ID}}\",\r\n        \"username\": \"{{user_name}}\",\r\n        \"password\": \"{{admin_password_EDIT}}\",\r\n        \"personal_name\": \"{{admin_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": true\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "18fcf087-0fd0-4b51-8d2a-2ab573fefb42",
                  "name": "Update Operator",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                        "exec": [
                          "user_email_EDIT = pm.environment.get(\"user_email_EDIT\");",
                          "operator_personal_name_EDIT = pm.environment.get(\"operator_personal_name_EDIT\")",
                          "",
                          "pm.test(\"C127553 Response contains edited email address\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_email_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127553 Response contains edited personal name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(operator_personal_name_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127553 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                        "exec": [
                          "operator_email = pm.environment.get(\"operator_email\");",
                          "operator_password = pm.environment.get(\"operator_password\")",
                          "operator_personal_name = pm.environment.get(\"operator_personal_name\")",
                          "",
                          "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + operator_email);",
                          "pm.environment.set(\"operator_password_EDIT\", \"EDIT\" + operator_password);",
                          "pm.environment.set(\"operator_personal_name_EDIT\", \"EDIT\" + operator_personal_name);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{operator_id}}\",\r\n        \"username\": \"{{operator_user_name}}\",\r\n        \"password\": \"{{operator_password_EDIT}}\",\r\n        \"personal_name\": \"{{operator_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": false\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "4aa02dcf-1872-47b0-997d-c55331cc3496",
                  "name": "Update Admin - Make Operator",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                        "exec": [
                          "pm.test(\"C127551 Admin is now an operator\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"is_admin\":false');",
                          "});",
                          "",
                          "pm.test(\"C127551 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                        "exec": [
                          "user_email = pm.environment.get(\"user_email\");",
                          "admin_password = pm.environment.get(\"admin_password\");",
                          "admin_personal_name = pm.environment.get(\"admin_personal_name\");",
                          "",
                          "pm.environment.set(\"user_email_EDIT\", \"EDIT\" + user_email);",
                          "pm.environment.set(\"admin_password_EDIT\", \"EDIT\" + admin_password);",
                          "pm.environment.set(\"admin_personal_name_EDIT\", \"EDIT\" + admin_personal_name);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{user_ID}}\",\r\n        \"username\": \"{{user_name}}\",\r\n        \"password\": \"{{admin_password_EDIT}}\",\r\n        \"personal_name\": \"{{admin_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": false\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "ceee9c3f-1955-4fd2-a556-e8f9b9771cfa",
                  "name": "Login with New Operator",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                        "exec": [
                          "pm.test(\"C127555 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "    ",
                          "pm.test(\"C127555 User is logged in as an operator\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=false ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "type": "text",
                          "value": "{{user_name}}"
                        },
                        {
                          "key": "password",
                          "type": "text",
                          "value": "{{admin_password_EDIT}}"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "7cb19dd4-9d6b-4466-a877-e7a726033714",
                  "name": "Login Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1efdff2a-8c60-4bc4-a201-ecce7e8e3948",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "type": "text",
                          "value": "{{admin_user}}"
                        },
                        {
                          "key": "password",
                          "type": "text",
                          "value": "{{admin_password}}"
                        }
                      ]
                    },
                    "url": "{{url}}",
                    "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
                  },
                  "response": []
                },
                {
                  "_postman_id": "984bddda-c790-4d03-9d13-950e6e1c3e27",
                  "name": "Update Operator - Make Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6175e43a-368d-4502-83e1-5ef1c52f9a75",
                        "exec": [
                          "pm.test(\"C127554 Operator is now an Admin\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"is_admin\":true');",
                          "});",
                          "",
                          "pm.test(\"C127554 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bbf5e62b-a19f-4cf8-aaae-e2ed1224004e",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"Users\",\r\n    \"method\": \"updateUser\",\r\n    \"data\": [\r\n      {\r\n        \"id\": \"{{operator_id}}\",\r\n        \"username\": \"{{operator_user_name}}\",\r\n        \"password\": \"{{operator_password_EDIT}}\",\r\n        \"personal_name\": \"{{operator_personal_name_EDIT}}\",\r\n        \"email\": \"{{user_email_EDIT}}\",\r\n        \"date_created\": {\r\n          \"date\": \"2018-06-05 21:17:28.000000\",\r\n          \"timezone_type\": 3,\r\n          \"timezone\": \"GMT\"\r\n        },\r\n        \"is_admin\": true\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 29\r\n  }\r\n]\r\n"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "7e16599a-6712-47bc-a5dc-fcf98ec15c37",
                  "name": "Login with New Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2e25ad93-6506-47e1-a3e6-87a8a9ace82c",
                        "exec": [
                          "pm.test(\"C127556 User is logged in as an admin\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "type": "text",
                          "value": "{{operator_user_name}}"
                        },
                        {
                          "key": "password",
                          "type": "text",
                          "value": "{{operator_password_EDIT}}"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "a91e2737-a6e5-4f98-8e24-7ce6f76ca966",
                  "name": "Delete User",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "670c345d-54af-47e0-a401-d870d811612a",
                        "exec": [
                          "user_name_EDIT = pm.environment.get(\"user_name_EDIT\");",
                          "",
                          "pm.test(\"C127547 Response does not contain deleted user\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(user_name_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127547 deleteUser gives success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.result.success).to.eql(true);",
                          "});",
                          "",
                          "pm.test(\"C127547 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Users\",\n  \"method\": \"deleteUser\",\n  \"data\": [\n    {\n      \"id\": \"{{user_ID}}\",\n      \"username\": \"{{user_Name}}\",\n      \"password\": \"\",\n      \"personal_name\": \"PName\",\n      \"email\": \"jpeeling1528233076@skylinenet.net\",\n      \"date_created\": {\n        \"date\": \"2018-06-05 21:11:18.000000\",\n        \"timezone_type\": 3,\n        \"timezone\": \"GMT\"\n      },\n      \"is_admin\": true\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 21\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "deletes the user which was just created and checks to make sure the user was actually set as deleted."
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "9eef3615-85f3-4ff0-a969-61ebb15e10cf",
              "name": "Dashboard",
              "description": "APIs called for the dashboard",
              "item": [
                {
                  "_postman_id": "f13dc17a-7c25-4d91-a31c-b0e47fbd49c7",
                  "name": "Get appliances",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "21b479ff-d576-41d5-9885-d6b5f624ab38",
                        "exec": [
                          "pm.test(\"C127517 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127517 Appliances were listed\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.result.success).to.eql(true);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Appliance\",\n\t\"method\": \"getAppliances\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 2\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "b11c690f-7e6b-4d72-8aff-831a25075c3c",
                  "name": "Get sfs capacity",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4dc5ab6-a817-4dc4-890b-94c1e9177b89",
                        "exec": [
                          "pm.test(\"C127516 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127516 Success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.result.success).to.eql(true);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Capacity\",\n\t\"method\": \"getSfsCapacity\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 14\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a25dc16-f7c3-4524-a25f-d657026ee1a4",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e5916ae-656b-492e-b7e6-c426f7b44fb6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "7336c575-50b8-4a93-9027-40dcaa4caf10",
              "name": "Contacts",
              "description": null,
              "item": [
                {
                  "_postman_id": "1595ad80-826f-465a-9c52-d1a64fea773c",
                  "name": "Create New Contact",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                        "exec": [
                          "pm.test(\"C127534 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127534 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                        "exec": [
                          "pm.environment.set(\"contact_name\", \"Matt\");",
                          "pm.environment.set(\"contact_last_name\", \"Morgan\");",
                          "pm.environment.set(\"contact_primary_phone\", \"111-999-9964\");",
                          "pm.environment.set(\"contact_title\", \"Developer\");",
                          "pm.environment.set(\"contact_company\", \"Whiteboards-4-Life\");",
                          "pm.environment.set(\"contact_secondary_phone\", \"333-444-5893\");",
                          "pm.environment.set(\"contact_email\", \"mathew@gmail.com\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"{{contact_last_name}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"{{contact_primary_phone}}\",\n\t\t\t\t\"title\": \"{{contact_title}}\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"{{contact_company}}\",\n\t\t\t\t\"secondary_phone\": \"{{contact_secondary_phone}}\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "07bad045-6d58-4722-a78e-78f19d281dec",
                  "name": "Retrieve Contact",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e4558a59-a6eb-4806-a91f-254c36501ff1",
                        "exec": [
                          "pm.test(\"C127536 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"getContacts\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127536 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "contact_name = pm.environment.get(\"contact_name\");",
                          "contact_last_name = pm.environment.get(\"contact_last_name\");",
                          "contact_primary_phone = pm.environment.get(\"contact_primary_phone\");",
                          "contact_title = pm.environment.get(\"contact_title\");",
                          "contact_company = pm.environment.get(\"contact_company\");",
                          "contact_secondary_phone = pm.environment.get(\"contact_secondary_phone\");",
                          "contact_email = pm.environment.get(\"contact_email\");",
                          "",
                          "pm.test(\"C127536 Contact name is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_name);",
                          "});",
                          "",
                          "pm.test(\"C127536 Contact last name is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_last_name);",
                          "});",
                          "",
                          "pm.test(\"C127536 Contact primary phone is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_primary_phone);",
                          "});",
                          "",
                          "pm.test(\"C127536 Contact title is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_title);",
                          "});",
                          "",
                          "pm.test(\"Contact company is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_company);",
                          "});",
                          "",
                          "pm.test(\"C127536 Contact email is saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_email);",
                          "});",
                          "",
                          "//Setting up for next test",
                          "pm.test(\"C127536 User was created and variables set.\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "    ",
                          "    pm.environment.unset(\"contact_id\");",
                          "    ",
                          "    pm.environment.set(\"contact_id\",jsonData[0].result.records[0].id);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 1\n  }\n]\n"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "c32a968f-11e1-40de-b372-9b824550dd51",
                  "name": "Update Contact",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0cf5a165-a291-4811-81ef-da4a318a6fb4",
                        "exec": [
                          "contact_name = pm.environment.get(\"contact_name\");",
                          "pm.environment.set(\"contact_name_EDIT\", contact_name + \"EDIT\");",
                          "",
                          "contact_last_name = pm.environment.get(\"contact_last_name\");",
                          "pm.environment.set(\"contact_last_name_EDIT\", contact_last_name + \"EDIT\");",
                          "",
                          "contact_title = pm.environment.get(\"contact_title\");",
                          "pm.environment.set(\"contact_title_EDIT\", contact_title + \"EDIT\");",
                          "",
                          "contact_company = pm.environment.get(\"contact_company\");",
                          "pm.environment.set(\"contact_company_EDIT\", contact_company + \"EDIT\");",
                          "",
                          "pm.environment.set(\"contact_secondary_phone_EDIT\", \"111-111-1115\");",
                          "",
                          "contact_email = pm.environment.get(\"contact_email\");",
                          "pm.environment.set(\"contact_email_EDIT\", contact_email + \"EDIT\");",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "e7db2ce3-0949-47cc-a29f-e0458198eb4b",
                        "exec": [
                          "contact_name_EDIT = pm.environment.get(\"contact_name_EDIT\");",
                          "contact_last_name_EDIT = pm.environment.get(\"contact_last_name_EDIT\");",
                          "contact_title_EDIT = pm.environment.get(\"contact_title_EDIT\");",
                          "contact_company_EDIT = pm.environment.get(\"contact_company_EDIT\");",
                          "contact_secondary_phone_EDIT = pm.environment.get(\"contact_secondary_phone_EDIT\");",
                          "contact_email_EDIT = pm.environment.get(\"contact_email_EDIT\");",
                          "",
                          "pm.test(\"C127533 Body includes edited first name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_name_EDIT);",
                          "});",
                          "pm.test(\"C127533 Body includes edited last name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_last_name_EDIT);",
                          "});",
                          "pm.test(\"C127533 Body includes edited title\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_title_EDIT);",
                          "});",
                          "pm.test(\"C127533 Body includes edited company\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_company_EDIT);",
                          "});",
                          "pm.test(\"C127533 Body includes edited email\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_email_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127533 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127533 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"updateContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[{\n  \"action\": \"Contact\",\n  \"method\": \"updateContact\",\n  \"data\": [\n    {\n      \"first_name\": \"{{contact_name_EDIT}}\",\n      \"last_name\": \"{{contact_last_name_EDIT}}\",\n      \"last_updated\": {\n        \"date\": \"2018-06-11 14:18:14.000000\",\n        \"timezone_type\": 3,\n        \"timezone\": \"GMT\"\n      },\n      \"primary_phone\": \"412-576-1000\",\n      \"title\": \"{{contact_title_EDIT}}\",\n      \"last_updated_by\": \"Stream Manager\",\n      \"company_name\": \"{{contact_company_EDIT}}\",\n      \"secondary_phone\": \"{{contact_secondary_phone_EDIT}}\",\n      \"email_address\": \"{{contact_email_EDIT}}@gmail.com\",\n      \"displayx\": \"793209 Allemang\",\n      \"id\": \"{{contact_id}}\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 29\n},\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 1\n  }]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "ddfd3fbe-fefc-4f53-b0b2-13f7bd96ff8b",
                  "name": "Delete Contact",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77edff98-14e0-4f52-8bdb-f90fc2fe7ea2",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "b2a7a52d-a9b8-4b10-aaa9-5a5ba3acbce3",
                        "exec": [
                          "contact_name_EDIT = pm.environment.get(\"contact_name_EDIT\");",
                          "contact_last_name_EDIT = pm.environment.get(\"contact_last_name_EDIT\");",
                          "contact_title_EDIT = pm.environment.get(\"contact_title_EDIT\");",
                          "contact_company_EDIT = pm.environment.get(\"contact_company_EDIT\");",
                          "contact_secondary_phone_EDIT = pm.environment.get(\"contact_secondary_phone_EDIT\");",
                          "contact_email_EDIT = pm.environment.get(\"contact_email_EDIT\");",
                          "",
                          "pm.test(\"C127535 Body does not include edited first name\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_name_EDIT);",
                          "});",
                          "pm.test(\"C127535 Body does not include edited last name\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_last_name_EDIT);",
                          "});",
                          "pm.test(\"C127535 Body does not include edited title\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_title_EDIT);",
                          "});",
                          "pm.test(\"C127535 Body does not include edited company\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_company_EDIT);",
                          "});",
                          "pm.test(\"C127535 Body does not include edited secondary phone name\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_secondary_phone_EDIT);",
                          "});",
                          "pm.test(\"C127535 Body does not include edited email\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(contact_email_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127535 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127535 deleteContact gives success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[1].result.success).to.eql(true);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"Contact\",\n    \"method\": \"deleteContact\",\n    \"data\": [\n      {\n        \"first_name\": \"{{contact_first_name_EDIT}}\",\n        \"last_name\": \"bfdbfdsdf\",\n        \"last_updated\": {\n          \"date\": \"2018-06-08 17:53:23.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"primary_phone\": \"444-168-6533\",\n        \"title\": \"bdfdfgbdf\",\n        \"last_updated_by\": \"Stream Manager\",\n        \"company_name\": \"bdfsdbdf\",\n        \"secondary_phone\": \"\",\n        \"email_address\": \"{{contact_email}}@gmail.com\",\n        \"displayx\": \"1111\",\n        \"id\": \"{{contact_id}}\"\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 28\n  },\n  {\n    \"action\": \"Contact\",\n    \"method\": \"getContacts\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25,\n        \"sort\": [\n          {\n            \"property\": \"last_name\",\n            \"direction\": \"ASC\"\n          }\n        ]\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 107\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "e036db18-dbd2-45e6-87e0-e672228b95b8",
              "name": "Zones",
              "description": null,
              "item": [
                {
                  "_postman_id": "411627a5-1d26-47ec-89bd-2cb18628587a",
                  "name": "Create New Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2312f720-db46-4552-a787-b8b1164c658e",
                        "exec": [
                          "pm.test(\"C127562 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127562 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a3492e1e-1f6a-4614-9556-fca9f9a8dc52",
                        "exec": [
                          "pm.environment.unset(\"zone_name\");",
                          "pm.environment.unset(\"zone_description\");",
                          "",
                          "var zone_name = Math.floor((Math.random() * 1000000) + 1);",
                          "var zone_description = Math.floor((Math.random() * 1000000) + 1);",
                          "",
                          "pm.environment.set(\"zone_name\", zone_name);",
                          "pm.environment.set(\"zone_description\", zone_description);",
                          "pm.environment.set(\"zone_auto_offline\", false);",
                          "pm.environment.set(\"zone_current_status_report\", true);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"createZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": null,\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name}}\",\n\t\t\t\t\"auto_offline\": \"{{zone_auto_offline}}\",\n\t\t\t\t\"description\": \"{{zone_description}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"include_in_current_status_report\": \"{{zone_current_status_report}}\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "64cd8caa-6ea7-4234-be69-743f14459ecc",
                  "name": "Retrieve Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7c82a013-75a5-4154-befc-699a9e81fad4",
                        "exec": [
                          "zone_name = pm.environment.get(\"zone_name\");",
                          "zone_description = pm.environment.get(\"zone_description\");",
                          "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                          "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                          "",
                          "pm.test(\"C127565 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"getZones\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127565 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127565 Body includes zone\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_name);",
                          "});",
                          "",
                          "pm.test(\"C127565 Body has new zone description\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_description);",
                          "});",
                          "",
                          "pm.test(\"C127565 Body has auto offline setting\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_auto_offline);",
                          "});",
                          "",
                          "pm.test(\"C127565 Body has current status settings\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_current_status_report);",
                          "});",
                          "",
                          "//Setting up for next test",
                          "pm.test(\"C127565 Zone was created and variables set.\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "    ",
                          "    pm.environment.unset(\"zone_id\");",
                          "    ",
                          "    recordsLength = jsonData[0].result.records.length;",
                          "    ",
                          "    pm.environment.set(\"zone_id\",jsonData[0].result.records[recordsLength-1].id);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "96180ce2-4460-4b3f-ace2-b710b508b7ad",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 16\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "1619ad9c-6219-4d16-8b80-1f7d5a527ec6",
                  "name": "Update Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e2e87afa-5685-43e1-aba3-4a082566403a",
                        "exec": [
                          "zone_name_EDIT = pm.environment.get(\"zone_name\");",
                          "zone_description_EDIT = pm.environment.get(\"zone_description\");",
                          "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                          "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                          "",
                          "pm.test(\"C127563 Body includes edited zone name\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_name_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127563 Body includes edited zone description\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_description_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127563 Body includes edited zone auto offline\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_auto_offline);",
                          "});",
                          "",
                          "pm.test(\"C127563 Body includes edited zone status report\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_current_status_report);",
                          "});",
                          "",
                          "pm.test(\"C127563 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127563 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"updateZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "1f827154-1f78-4c81-bf74-fe0d14db46ac",
                        "exec": [
                          "zone_name = pm.environment.get(\"zone_name\");",
                          "pm.environment.set(\"zone_name_EDIT\", zone_name + \"EDIT\");",
                          "",
                          "zone_description = pm.environment.get(\"zone_description\");",
                          "pm.environment.set(\"zone_description_EDIT\", zone_description + \"EDIT\");",
                          "",
                          "pm.environment.set(\"zone_auto_offline\", true);",
                          "",
                          "pm.environment.set(\"zone_current_status_report\", false);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"updateZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": \"{{zone_id}}\",\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name_EDIT}}\",\n\t\t\t\t\"auto_offline\": \"{{zone_auto_offline}}\",\n\t\t\t\t\"description\": \"{{zone_description_EDIT}}\",\n\t\t\t\t\"last_updated\": {\n\t\t\t\t\t\"date\": \"2018-06-13 16:53:21.000000\",\n\t\t\t\t\t\"timezone_type\": 3,\n\t\t\t\t\t\"timezone\": \"GMT\"\n\t\t\t\t},\n\t\t\t\t\"last_updated_by\": \"admin\",\n\t\t\t\t\"include_in_current_status_report\": \"{{zone_current_status_report}}\"\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t},\n\t{\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 16\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "7ccbccf0-aecf-41a2-bbda-1a6f1673adad",
                  "name": "Delete Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "40d3fee4-2ae4-4d1d-8bd6-25f5d930910a",
                        "exec": [
                          "zone_name_EDIT = pm.environment.get(\"zone_name\");",
                          "zone_description_EDIT = pm.environment.get(\"zone_description\");",
                          "zone_auto_offline = pm.environment.get(\"zone_auto_offline\");",
                          "zone_current_status_report = pm.environment.get(\"zone_current_status_report\");",
                          "",
                          "pm.test(\"C127564 does not contain deleted zone name\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(zone_name_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127564 Response does not contain deleted zone description\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(zone_description_EDIT);",
                          "});",
                          "",
                          "pm.test(\"C127564 deleteZone gives success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[1].result.success).to.eql(true);",
                          "});",
                          "",
                          "pm.test(\"C127564 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fe5296d5-0c4b-4241-b91c-9eac5ae7ddb5",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"Zone\",\n    \"method\": \"deleteZone\",\n    \"data\": [\n      {\n        \"id\": \"{{zone_id}}\",\n        \"customer_id\": \"\",\n        \"name\": \"{{zone_name_EDIT}}\",\n        \"auto_offline\": false,\n        \"description\": \"{{zone_description}}\",\n        \"last_updated\": {\n          \"date\": \"2018-06-13 19:01:18.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"last_updated_by\": \"admin\",\n        \"include_in_current_status_report\": true\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 29\n  },\n  {\n    \"action\": \"Zone\",\n    \"method\": \"getZones\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 30\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "b9018231-6d78-4391-8db4-4cd0ba9d9f84",
              "name": "Appliances",
              "description": "",
              "item": [
                {
                  "_postman_id": "c2e95dd1-61fd-4856-a1b1-197cdb475583",
                  "name": "Retrieve",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd08c7d1-4426-4be4-ab03-fb43db6a6b68",
                        "exec": [
                          "// Parse response body",
                          "var obj = JSON.parse(pm.response.text());",
                          "var record = null;",
                          "",
                          "",
                          "pm.test(\"C127526 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127526 Correct Hostname\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"hostname\\\":\\\"hera.qa.skyline.local\\\"\");",
                          "});",
                          "",
                          "// Find Hera's record to verify model and version",
                          "for (var i = 0; i < obj.result.total; i++) {",
                          "    if (obj.result.records[i].hostname === \"hera.qa.skyline.local\") {",
                          "        record = obj.result.records[i];",
                          "    }",
                          "}",
                          "",
                          "pm.test(\"C127526 Correct Model\", function () {",
                          "    pm.expect(record.model === \"SFS1000\");",
                          "});",
                          "",
                          "sfsVersion = pm.environment.get(\"SfsVersion\");",
                          "pm.test(\"C127526 Correct SFS Version\", function () {",
                          "    pm.expect(record.software_version === sfsVersion);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/"
                  },
                  "response": []
                },
                {
                  "_postman_id": "ad1b93b5-8ffb-44b7-9ab5-cf0a6ae8948b",
                  "name": "Create New Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2312f720-db46-4552-a787-b8b1164c658e",
                        "exec": [
                          "pm.test(\"Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createZone\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "zone_name = pm.environment.get(\"zone_name\");",
                          "zone_description = pm.environment.get(\"zone_description\");",
                          "",
                          "pm.test(\"Body has new zone\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_name);",
                          "});",
                          "",
                          "pm.test(\"Body has new zone description\", function () {",
                          "    pm.expect(pm.response.text()).to.include(zone_description);",
                          "});",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a3492e1e-1f6a-4614-9556-fca9f9a8dc52",
                        "exec": [
                          "pm.environment.unset(\"zone_name\");",
                          "pm.environment.unset(\"zone_description\");",
                          "",
                          "var zone_name = Math.floor((Math.random() * 1000000) + 1);",
                          "var zone_description = Math.floor((Math.random() * 1000000) + 1);",
                          "",
                          "pm.environment.set(\"zone_name\", zone_name);",
                          "pm.environment.set(\"zone_description\", zone_description);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"createZone\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": null,\n\t\t\t\t\"customer_id\": \"\",\n\t\t\t\t\"name\": \"{{zone_name}}\",\n\t\t\t\t\"auto_offline\": false,\n\t\t\t\t\"description\": \"{{zone_description}}\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"include_in_current_status_report\": true\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"getZones\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d8e105fb-f820-464e-8652-9bbeb1c4d4b5",
                  "name": "Update SFS",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f12aa076-c80a-46f8-9f9e-a834799288ae",
                        "exec": [
                          "pm.test(\"C127528 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127528 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"success\\\":true,\\\"message\\\":\\\"Appliance updated\\\"\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "73aa30af-f544-4b02-9932-d0eec285f0ac",
                        "exec": [
                          "pm.environment.set(\"appliance_pubIP\", \"6.6.6.\" + Math.floor((Math.random() * 1000000) + 1));"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"updateAppliance\",\n  \"data\": [\n    {\n      \"status\": \"\",\n      \"hostname\": \"Jennnn-SFS\",\n      \"last_updated\": \"\",\n      \"software_version\": \"1.1.111\",\n      \"contract_renewal_date\": \"\",\n      \"id\": 21,\n      \"public_ip\": \"{{appliance_pubIP}}\",\n      \"has_service_contract\": \"\",\n      \"management_ip\": \"172.0.0.77\",\n      \"username\": \"admin\",\n      \"password\": \"sfs1000\",\n      \"last_updated_by\": \"\",\n      \"total_connections\": \"\",\n      \"license_type\": \"\",\n      \"license_key\": \"\",\n      \"synced\": \"\",\n      \"model\": \"SFS1000\",\n      \"location_name\": \"Test Data Center\",\n      \"zone_name\": \"{{zone_name}}\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 17\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/",
                    "description": "hostname and id need to match an appliance in order to update it."
                  },
                  "response": []
                },
                {
                  "_postman_id": "9c02784a-b609-48f8-b8fe-5c6f85acd618",
                  "name": "Retrieve Updated",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b1bb5551-2e2d-4947-b918-7c860cb7af47",
                        "exec": [
                          "// Parse response body",
                          "var obj = JSON.parse(pm.response.text());",
                          "var record = null;",
                          "",
                          "zone_name = pm.environment.get(\"zone_name\");",
                          "appliance_pubIP = pm.environment.get(\"appliance_pubIP\");",
                          "",
                          "pm.test(\"C127529 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127529 Correct Hostname\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"hostname\\\":\\\"Jennnn-SFS\\\"\");",
                          "});",
                          "",
                          "// Find appliance's record to verify model and version",
                          "for (var i = 0; i < obj.result.total; i++) {",
                          "    if (obj.result.records[i].hostname === \"Jennnn-SFS\") {",
                          "        record = obj.result.records[i];",
                          "    }",
                          "}",
                          "",
                          "pm.test(\"C127529 Correct Public IP\", function () {",
                          "    pm.expect(record.public_ip === appliance_pubIP);",
                          "});",
                          "",
                          "pm.test(\"C127529 Correct Zone\", function () {",
                          "    pm.expect(record.public_ip === zone_name);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/"
                  },
                  "response": []
                },
                {
                  "_postman_id": "b256798b-f885-43e3-a468-213cf386179e",
                  "name": "Delete",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f70ab318-f89d-49be-9cf7-ca8032b0d253",
                        "exec": [
                          "pm.test(\"C127527 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127527 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(\"\\\"result\\\":{\\\"success\\\":true\\\"\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"deleteAppliance\",\n  \"data\": [\n    {\n      \"status\": \"\",\n      \"hostname\": \"Jennnn-SFS\",\n      \"last_updated\": \"\",\n      \"software_version\": \"1.1.111\",\n      \"contract_renewal_date\": \"\",\n      \"id\": 21,\n      \"public_ip\": \"6.6.6.6\",\n      \"has_service_contract\": \"\",\n      \"management_ip\": \"172.0.0.77\",\n      \"username\": \"admin\",\n      \"password\": \"sfs1000\",\n      \"last_updated_by\": \"\",\n      \"total_connections\": \"\",\n      \"license_type\": \"\",\n      \"license_key\": \"\",\n      \"synced\": \"\",\n      \"model\": \"SFS1000\",\n      \"location_name\": \"Test Data Center\",\n      \"zone_name\": \"Public\"\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 18\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/",
                    "description": "I don't know how often we should run this. We only have a limited number of appliances to hook up to our streammanager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "33c1b5c9-e77e-438b-b072-9690339c1c34",
                  "name": "Check Deleted",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "833c2d9d-108d-4e30-b6db-355b0b695f16",
                        "exec": [
                          "pm.test(\"C127530 Body does not include deleted appliance\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(\"\\\"hostname\\\": \\\"Jennnn-SFS\\\"\");",
                          "});",
                          "",
                          "pm.test(\"C127530 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "f2d54042-edf9-4f27-9b86-a3c910d7888a",
              "name": "APIs",
              "description": "get lists of different items/information from stream manager.",
              "item": [
                {
                  "_postman_id": "2251af16-8d6f-4819-a323-b0963df6aaf6",
                  "name": "List APIs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "13d9196c-9908-4a61-8aaa-54f6cf6781d5",
                        "exec": [
                          "pm.test(\"C127660 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127660 Body contains api names\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Ext.app.REMOTING_API\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{url}}/1.0/direct/api"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f772db1-d93d-4948-b616-6fab453c0ba1",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7388327a-7e65-48b9-bd99-48f68fa09ab0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "90d904b6-1830-4c8f-968a-a1feb9283ddb",
              "name": "API Keys",
              "description": null,
              "item": [
                {
                  "_postman_id": "8a80037e-83b8-4ea9-8e6b-c8f21c4be5c8",
                  "name": "Create New Contact",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                        "exec": [
                          "pm.test(\"Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "contact_name = pm.environment.get(\"contact_name\");",
                          "",
                          "pm.test(\"Body has contact\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_name);",
                          "});",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "// Set up next test",
                          "var obj = pm.response.json();",
                          "var record;",
                          "pm.environment.unset(\"contact_id\");",
                          "for (var i = 0; i < obj[1].result.total; i++) {",
                          "    if (obj[1].result.records[i].first_name == contact_name) {",
                          "        record = obj[1].result.records[i].id;",
                          "    }",
                          "}",
                          "pm.environment.set(\"contact_id\",record);",
                          "console.log(record);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                        "exec": [
                          "pm.environment.unset(\"contact_name\");",
                          "pm.environment.unset(\"contact_email\");",
                          "",
                          "var first_name = Math.floor((Math.random() * 1000000) + 1);",
                          "var email = Math.floor((Math.random() * 1000000) + 1);",
                          "",
                          "pm.environment.set(\"contact_name\", first_name);",
                          "pm.environment.set(\"contact_email\", email);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"Allemang\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"412-576-8688\",\n\t\t\t\t\"title\": \"adcl\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"dfvfds\",\n\t\t\t\t\"secondary_phone\": \"412-576-8688\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "0a3ee11f-0a60-4ee7-94b9-4a8d8aa583d3",
                  "name": "Create API Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1181797c-a819-4e06-a600-15bec4595719",
                        "exec": [
                          "pm.test(\"C127540 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createApiKey\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "user_key = pm.environment.get(\"user_key\");",
                          "",
                          "pm.test(\"C127540 API Key was created and variables set.\", function () {",
                          "    var obj = JSON.parse(pm.response.text());",
                          "    var record = null;",
                          "    contact_id = pm.environment.get(\"contact_id\");",
                          "",
                          "    for (var i = 0; i < obj[1].result.total; i++){",
                          "        if (obj[1].result.records[i].zone_id == 2 && obj[1].result.records[i].contact_id == contact_id){",
                          "            record = obj[1].result.records[i];",
                          "        }",
                          "    }",
                          "    pm.environment.unset(\"user_key\");",
                          "    pm.environment.set(\"user_key\",record.user_key);",
                          "});",
                          "",
                          "user_key = pm.environment.get(\"user_key\");",
                          "",
                          "pm.test(\"C127540 Body has new key\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_key);",
                          "});",
                          "",
                          "pm.test(\"C127540 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127540 API Key list is not empty\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"createApiKey\",\r\n    \"data\": [\r\n      {\r\n        \"user_key\": \"\",\r\n        \"level\": \"\",\r\n        \"date_created\": \"\",\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"primary phone\": \"\",\r\n        \"email address\": \"\",\r\n        \"contact_id\": \"{{contact_id}}\",\r\n        \"zone_name\": \"\",\r\n        \"zone_id\": 2,\r\n        \"id\": null\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 19\r\n  },\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"getApikeys\",\r\n    \"data\": [\r\n      {\r\n        \"page\": 1,\r\n        \"start\": 0,\r\n        \"limit\": 25\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 20\r\n  }\r\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "ef2bab49-2bed-4ab5-bf3a-0e1f71674bde",
                  "name": "Retrieve API keys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b1a39797-3f6c-410d-a612-37ee0d33f690",
                        "exec": [
                          "var obj = JSON.parse(pm.response.text());",
                          "var record = null;",
                          "",
                          "contact_id = pm.environment.get(\"contact_id\");",
                          "",
                          "for (var i = 0; i < obj.result.total; i++){",
                          "    if (obj.result.records[i].zone_id == 2 && obj.result.records[i].contact_id == contact_id){",
                          "        record = obj.result.records[i];",
                          "    }",
                          "}",
                          "",
                          "pm.test(\"C127542 Correct Zone\", function () {",
                          "    pm.expect(record.zone_name === \"SSL VPN\");",
                          "});",
                          "",
                          "pm.test(\"C127542 Correct Contact\", function () {",
                          "    pm.expect(record.first_name === \"Bertha\");",
                          "    pm.expect(record.last_name === \"Shakira\");",
                          "});",
                          "",
                          "pm.test(\"C127542 Response record contains an API key\", function () {",
                          "    pm.expect(record.user_key!==null);",
                          "});",
                          "",
                          "pm.environment.unset(\"user_API_Key\");",
                          "pm.environment.set(\"user_API_Key\", record.user_key);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"ApiKey\",\n\t\"method\": \"getApikeys\",\n\t\"data\": [\n\t  {\n\t    \"page\": 1,\n\t    \"start\": 0,\n\t    \"limit\": 25\n\t  }\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 20\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all the API keys."
                  },
                  "response": []
                },
                {
                  "_postman_id": "7290d78e-1f41-4dbd-a388-dad32c2a2c45",
                  "name": "GetAll streams - Only Streams from Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                        "exec": [
                          "pm.test(\"C127543 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127543 Body is JSON format\", function () {",
                          "    pm.response.to.be.json;",
                          "});",
                          "",
                          "pm.test(\"C127543 Streams in API Zone received\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"test_stream_cam_to_multiple_sfs\");",
                          "});",
                          "",
                          "pm.test(\"C127543 Streams not in API Zone are not received\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(\"stream_1012\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_API_Key}}&format=json",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_API_Key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d8500037-8186-4f10-a58a-bc05efcc3ab5",
                  "name": "Delete API Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4f9c766-fe9c-4c3a-a7e5-b171779af845",
                        "exec": [
                          "user_key = pm.environment.get(\"user_API_Key\");",
                          "",
                          "pm.test(\"C127541 Response does not contain deleted key\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(user_key);",
                          "});",
                          "",
                          "pm.test(\"C127541 deleteApiKey gives success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[1].result.success).to.eql(true);",
                          "});",
                          "",
                          "pm.test(\"C127541 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127541 Api key was deleted\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(user_key);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"deleteApiKey\",\n    \"data\": [\n      {\n        \"user_key\": \"{{user_API_Key}}\",\n        \"level\": 10,\n        \"date_created\": {\n          \"date\": \"2018-07-02 18:13:32.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"first_name\": \"DOT\",\n        \"last_name\": \"Government\",\n        \"primary phone\": \"\",\n        \"email address\": \"\",\n        \"contact_id\": 1,\n        \"zone_name\": \"Public\",\n        \"zone_id\": 1,\n        \"id\": null\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 23\n  },\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 24\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "deletes an api key"
                  },
                  "response": []
                },
                {
                  "_postman_id": "fc8ef744-29f0-47b8-966e-464f4c7bebf8",
                  "name": "GetAll Steams - No Streams From Deleted API Key's Zone",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                        "exec": [
                          "pm.test(\"C127544 Status code is 403\", function () {",
                          "    pm.response.to.have.status(403);",
                          "});",
                          "",
                          "pm.test(\"C127544 Body is JSON format\", function () {",
                          "    pm.response.to.be.json;",
                          "});",
                          "",
                          "pm.test(\"C127544 Streams in deleted API key's Zone not received\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(\"test_stream_cam_to_multiple_sfs\");",
                          "});",
                          "",
                          "pm.test(\"C127544 Streams not in deleted API key's Zone are not received\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(\"stream_1012\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_API_Key}}&format=json",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_API_Key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "586d7d8f-e591-4dfc-9b01-10d324e24cf9",
              "name": "Metadata",
              "description": "API tests for streams tab for operators",
              "item": [
                {
                  "_postman_id": "7e921af4-7ea5-4f39-a620-9f1323526bb7",
                  "name": "Create Metadata",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                        "exec": [
                          "pm.test(\"C127519 Verify admin can edit stream metadata\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                        "exec": [
                          "pm.environment.set(\"stream_extTID\", \"31\");",
                          "// This ID is the id that is associated with the stream's metadata",
                          "pm.environment.set(\"stream_id\", \"6\");",
                          "pm.environment.set(\"stream_description\", \"test_stream_cam_to_multiple_sfs\");",
                          "pm.environment.set(\"stream_jurisdiction\", \"test jurisdiction\");",
                          "pm.environment.set(\"stream_route_name\", \"test route\");",
                          "pm.environment.set(\"stream_milemarker\", \"66\");",
                          "pm.environment.set(\"stream_traffic_direction\", \"S\");",
                          "pm.environment.set(\"stream_latitude\", \"50\");",
                          "pm.environment.set(\"stream_longitude\", \"51\");",
                          "pm.environment.set(\"stream_device_id\", \"11536\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "extTID",
                          "type": "text",
                          "value": "{{stream_extTID}}"
                        },
                        {
                          "key": "extAction",
                          "type": "text",
                          "value": "Streams"
                        },
                        {
                          "key": "extMethod",
                          "type": "text",
                          "value": "updateMetadata"
                        },
                        {
                          "key": "extType",
                          "type": "text",
                          "value": "rpc"
                        },
                        {
                          "key": "extUpload",
                          "type": "text",
                          "value": "false"
                        },
                        {
                          "key": "id",
                          "type": "text",
                          "value": "{{stream_id}}"
                        },
                        {
                          "key": "description",
                          "type": "text",
                          "value": "{{stream_description}}"
                        },
                        {
                          "key": "jurisdiction",
                          "type": "text",
                          "value": "{{stream_jurisdiction}}"
                        },
                        {
                          "key": "route_name",
                          "type": "text",
                          "value": "{{stream_route_name}}"
                        },
                        {
                          "key": "mile_marker",
                          "type": "text",
                          "value": "{{stream_milemarker}}"
                        },
                        {
                          "key": "traffic_direction",
                          "type": "text",
                          "value": "{{stream_traffic_direction}}"
                        },
                        {
                          "key": "latitude",
                          "type": "text",
                          "value": "{{stream_latitude}}"
                        },
                        {
                          "key": "longitude",
                          "type": "text",
                          "value": "{{stream_longitude}}"
                        },
                        {
                          "key": "deviceid",
                          "type": "text",
                          "value": "{{stream_device_id}}"
                        }
                      ]
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
                  },
                  "response": []
                },
                {
                  "_postman_id": "9289fe56-6851-4287-b102-ca15a22a73a3",
                  "name": "Read Created Metadata",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                        "exec": [
                          "stream_id = pm.environment.get(\"stream_id\");",
                          "stream_description = pm.environment.get(\"stream_description\");",
                          "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction\");",
                          "stream_route_name = pm.environment.get(\"stream_route_name\");",
                          "stream_milemarker = pm.environment.get(\"stream_milemarker\");",
                          "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction\");",
                          "stream_latitude = pm.environment.get(\"stream_latitude\");",
                          "stream_longitude = pm.environment.get(\"stream_longitude\");",
                          "",
                          "pm.test(\"C127520 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127520 Success message present\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                          "});",
                          "",
                          "pm.test(\"C127520 Created Metadata was saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"{\\\"id\\\":\" + stream_id + \",\\\"description\\\":\\\"\" + stream_description + \"\\\",\\\"jurisdiction\\\":\\\"\" + stream_jurisdiction + \"\\\",\\\"traffic_direction\\\":\\\"\" + stream_traffic_direction + \"\\\",\\\"route_name\\\":\\\"\" + stream_route_name + \"\\\",\\\"mile_marker\\\":\" + stream_milemarker + \",\\\"latitude\\\":\" + stream_latitude + \",\\\"longitude\\\":\" + stream_longitude);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "returns a list of camera streams (camera grid)"
                  },
                  "response": []
                },
                {
                  "_postman_id": "7e32c625-7ad0-4cc6-9edd-af3d7aa585ee",
                  "name": "Edit Metadata",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                        "exec": [
                          "pm.test(\"C127521 Verify admin can edit stream metadata\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                        "exec": [
                          "stream_description = pm.environment.get(\"stream_description\");",
                          "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction\");",
                          "stream_route_name = pm.environment.get(\"stream_route_name\");",
                          "",
                          "pm.environment.set(\"stream_description_EDIT\", stream_description + \"EDIT\");",
                          "pm.environment.set(\"stream_jurisdiction_EDIT\", stream_jurisdiction + \"EDIT\");",
                          "pm.environment.set(\"stream_route_name_EDIT\", stream_route_name + \"EDIT\");",
                          "pm.environment.set(\"stream_milemarker_EDIT\", \"11\");",
                          "pm.environment.set(\"stream_traffic_direction_EDIT\", \"NE\");",
                          "pm.environment.set(\"stream_latitude_EDIT\", \"20\");",
                          "pm.environment.set(\"stream_longitude_EDIT\", \"21\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "extTID",
                          "type": "text",
                          "value": "{{stream_extTID}}"
                        },
                        {
                          "key": "extAction",
                          "type": "text",
                          "value": "Streams"
                        },
                        {
                          "key": "extMethod",
                          "type": "text",
                          "value": "updateMetadata"
                        },
                        {
                          "key": "extType",
                          "type": "text",
                          "value": "rpc"
                        },
                        {
                          "key": "extUpload",
                          "type": "text",
                          "value": "false"
                        },
                        {
                          "key": "id",
                          "type": "text",
                          "value": "{{stream_id}}"
                        },
                        {
                          "key": "description",
                          "type": "text",
                          "value": "{{stream_description_EDIT}}"
                        },
                        {
                          "key": "jurisdiction",
                          "type": "text",
                          "value": "{{stream_jurisdiction_EDIT}}"
                        },
                        {
                          "key": "route_name",
                          "type": "text",
                          "value": "{{stream_route_name_EDIT}}"
                        },
                        {
                          "key": "mile_marker",
                          "type": "text",
                          "value": "{{stream_milemarker_EDIT}}"
                        },
                        {
                          "key": "traffic_direction",
                          "type": "text",
                          "value": "{{stream_traffic_direction_EDIT}}"
                        },
                        {
                          "key": "latitude",
                          "type": "text",
                          "value": "{{stream_latitude_EDIT}}"
                        },
                        {
                          "key": "longitude",
                          "type": "text",
                          "value": "{{stream_longitude_EDIT}}"
                        },
                        {
                          "key": "deviceid",
                          "type": "text",
                          "value": "{{stream_device_id}}"
                        }
                      ]
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
                  },
                  "response": []
                },
                {
                  "_postman_id": "40cb809e-5e41-4768-850b-9e6d7c481b29",
                  "name": "Read Updated Metadata",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                        "exec": [
                          "stream_id = pm.environment.get(\"stream_id\");",
                          "stream_description = pm.environment.get(\"stream_description_EDIT\");",
                          "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction_EDIT\");",
                          "stream_route_name = pm.environment.get(\"stream_route_name_EDIT\");",
                          "stream_milemarker = pm.environment.get(\"stream_milemarker_EDIT\");",
                          "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction_EDIT\");",
                          "stream_latitude = pm.environment.get(\"stream_latitude_EDIT\");",
                          "stream_longitude = pm.environment.get(\"stream_longitude_EDIT\");",
                          "",
                          "pm.test(\"C127522 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127522 Success message present\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                          "});",
                          "",
                          "pm.test(\"C127522 Updated Metadata was saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"{\\\"id\\\":\" + stream_id + \",\\\"description\\\":\\\"\" + stream_description + \"\\\",\\\"jurisdiction\\\":\\\"\" + stream_jurisdiction + \"\\\",\\\"traffic_direction\\\":\\\"\" + stream_traffic_direction + \"\\\",\\\"route_name\\\":\\\"\" + stream_route_name + \"\\\",\\\"mile_marker\\\":\" + stream_milemarker + \",\\\"latitude\\\":\" + stream_latitude + \",\\\"longitude\\\":\" + stream_longitude);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "returns a list of camera streams (camera grid)"
                  },
                  "response": []
                },
                {
                  "_postman_id": "58e29fdd-6350-4cf8-be31-2ca7301211c6",
                  "name": "Delete Metadata",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "85babbf0-3b57-40a7-b91c-ae6d36811bb0",
                        "exec": [
                          "pm.test(\"C127523 Verify admin can edit stream metadata\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"result\":{\"success\":true}}');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e7ee47de-2d92-4855-84d0-ab11eae8a212",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "extTID",
                          "type": "text",
                          "value": "{{stream_extTID}}"
                        },
                        {
                          "key": "extAction",
                          "type": "text",
                          "value": "Streams"
                        },
                        {
                          "key": "extMethod",
                          "type": "text",
                          "value": "updateMetadata"
                        },
                        {
                          "key": "extType",
                          "type": "text",
                          "value": "rpc"
                        },
                        {
                          "key": "extUpload",
                          "type": "text",
                          "value": "false"
                        },
                        {
                          "key": "id",
                          "type": "text",
                          "value": "{{stream_id}}"
                        },
                        {
                          "key": "description",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "jurisdiction",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "route_name",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "mile_marker",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "traffic_direction",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "latitude",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "longitude",
                          "type": "text",
                          "value": ""
                        },
                        {
                          "key": "deviceid",
                          "type": "text",
                          "value": "{{stream_device_id}}"
                        }
                      ]
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "important things to know for the test:\n\nyou will need the id (or metadataID) to change the stream. that id is the unique identifier of the stream.\n\nwe need a way to mass update metadata for load testing."
                  },
                  "response": []
                },
                {
                  "_postman_id": "046a0380-1f15-4401-a892-8b84526a1c04",
                  "name": "Read Deleted",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                        "exec": [
                          "stream_id = pm.environment.get(\"stream_id\");",
                          "stream_description = pm.environment.get(\"stream_description_EDIT\");",
                          "stream_jurisdiction = pm.environment.get(\"stream_jurisdiction_EDIT\");",
                          "stream_route_name = pm.environment.get(\"stream_route_name_EDIT\");",
                          "stream_milemarker = pm.environment.get(\"stream_milemarker_EDIT\");",
                          "stream_traffic_direction = pm.environment.get(\"stream_traffic_direction_EDIT\");",
                          "stream_latitude = pm.environment.get(\"stream_latitude_EDIT\");",
                          "stream_longitude = pm.environment.get(\"stream_longitude_EDIT\");",
                          "",
                          "pm.test(\"C127524 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127524 Success message present\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                          "});",
                          "",
                          "pm.test(\"C127524 Deleted Metadata was saved\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"id\":'+stream_id+',\"description\":\"\",\"jurisdiction\":\"\",\"traffic_direction\":\"\",\"route_name\":\"\",\"mile_marker\":0,\"latitude\":0,\"longitude\":0');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "returns a list of camera streams (camera grid)"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42c2c41d-89b0-4991-b290-092d7b8b96ed",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6d091680-5217-4c72-9243-2297364fc021",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "2709f040-14b7-4d12-bd50-4d2f0b0b66ca",
              "name": "Reports",
              "description": "these are the APIs which are called when you view reports in the reports tab of stream manager.",
              "item": [
                {
                  "_postman_id": "49de39e6-5a75-44bc-b142-a0033d9d2e96",
                  "name": "getAllStreamStatus",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5bb8f8e4-838d-4008-ad62-f9b3e552c10b",
                        "exec": [
                          "pm.test(\"C127657 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getAllStreamStatus\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 22\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "this is the response from using the 'Current status' report in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "3e090510-fbaa-4c01-b82c-ec237263482c",
                  "name": "Stream metadata report",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9309f386-78cc-4e1f-92f1-0153d75e9154",
                        "exec": [
                          "pm.test(\"C127658 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 23\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "this is the response when you get data for the 'stream metadata' report in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "cdae3d2c-25b5-464f-ab33-a19025a48311",
                  "name": "stream network config report",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fc3fe377-5c3a-4b40-bd5a-d93dacb54412",
                        "exec": [
                          "pm.test(\"C127659 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 24\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "74b707ab-71af-47ec-a24f-e4a83f7e5b54",
              "name": "Get Lists",
              "description": "get lists of different items/information from stream manager.",
              "item": [
                {
                  "_postman_id": "b1f2a0fd-07a1-431d-bfd2-164acff9793a",
                  "name": "Get All Contacts",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bd01da50-638a-4d06-ac48-355d8066b431",
                        "exec": [
                          "pm.test(\"C127576 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 1\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all contacts associated with the stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "ce6c9145-3891-42ee-a4fc-1ee5dfb0bd01",
                  "name": "Get All Appliances",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "523b5782-12a9-4a8e-8ee7-4bca8c45a8c3",
                        "exec": [
                          "pm.test(\"C127577 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"action\": \"Appliance\",\n\t\t\"method\": \"getAppliances\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 2\n\t}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all appliances"
                  },
                  "response": []
                },
                {
                  "_postman_id": "1dcf8076-51a7-438a-bcb3-3a4a638afe78",
                  "name": "Get all issue streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3210c158-8837-41a2-97ff-5fbb4016ead3",
                        "exec": [
                          "pm.test(\"C127578 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getIssueStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 3\n\t}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all issue streams from stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "6b250ff3-3fc2-4d2d-86e2-ec0de79d0b38",
                  "name": "Get all Locations",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "26e22d2e-a6f2-4614-b6da-0e1d0fd512de",
                        "exec": [
                          "pm.test(\"C127579 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Location\",\n\t\t\"method\": \"getLocations\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 4\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all locations associated with a stream manager"
                  },
                  "response": []
                },
                {
                  "_postman_id": "4a5773b6-73d3-4256-94f8-be5342e94b28",
                  "name": "Get all offline sfs streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ea61cd6c-d14d-4c10-87e0-3545c4079013",
                        "exec": [
                          "pm.test(\"C127580 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"Media\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 5\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all offlined sfs streams from stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "7fdbcd9c-b5b2-4502-b6b8-7c4f362d214f",
                  "name": "Get all offlined streams no media flag",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a52af66e-6564-479f-85fc-78e49c204817",
                        "exec": [
                          "pm.test(\"C127581 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 6\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "This technically has its own TID. Im not really sure how much it differs from Get all offline sfs streams. The only difference is that there is no type: media property in this one."
                  },
                  "response": []
                },
                {
                  "_postman_id": "2d4b288c-f88c-47af-b3f8-0b2198edcd48",
                  "name": "Get all offline streams SSL VPN",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d9c63487-9f93-4637-98c1-71cf367ceb72",
                        "exec": [
                          "pm.test(\"C127583 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"SSL VPN\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 8\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "offline appliace = SSL VPN"
                  },
                  "response": []
                },
                {
                  "_postman_id": "b2fb0537-19ad-4493-b8d0-df1f4efe6cfe",
                  "name": "Get all streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7abfae09-2dc8-421e-a8c0-32b99e03a824",
                        "exec": [
                          "pm.test(\"C127584 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getGrid\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 9\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all streams (grid)"
                  },
                  "response": []
                },
                {
                  "_postman_id": "5652ad50-a304-4d08-84fa-fe2707ef25d5",
                  "name": "Get all users",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "db8bbf11-03dd-43d1-8612-7215cafecab6",
                        "exec": [
                          "pm.test(\"C127585 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
                  },
                  "response": []
                },
                {
                  "_postman_id": "7f3c49a8-275e-417e-88da-d879d17d94ba",
                  "name": "Get all zones",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41b1a442-474c-42c5-a538-eb588d29a1a7",
                        "exec": [
                          "pm.test(\"C127586 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"getZones\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 11\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Gets a list of all zones in stream manager"
                  },
                  "response": []
                },
                {
                  "_postman_id": "33adec3c-4f2b-4ea8-bd0d-379830031b2e",
                  "name": "Get Stream Map",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e5b299d5-3abd-42ad-89b8-cb71210d6735",
                        "exec": [
                          "//this API gets information for stream test_stream_alpha, which has a metadata_id of 1",
                          "",
                          "pm.test(\"C127587 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getStreamMap\",\n\t\"data\": [\n\t\t{\n\t\t\t\"metadataId\": {{metadata_id}}\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 17\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a stream map of a test stream based on its metadata_id"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f772db1-d93d-4948-b616-6fab453c0ba1",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7388327a-7e65-48b9-bd99-48f68fa09ab0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "42492eaa-003c-4a7b-a37b-51936776de3a",
          "name": "Operator",
          "description": "",
          "item": [
            {
              "_postman_id": "3ffe498e-c038-464c-a4a1-41c29aea33f5",
              "name": "Login",
              "description": "Tests under the Login category.",
              "item": [
                {
                  "_postman_id": "935f6cf9-7b4d-4974-805c-d1374f59ec57",
                  "name": "Login Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c4858c6f-531a-44db-851c-98bdbc5d47eb",
                        "exec": [
                          "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{admin_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{admin_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}",
                    "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
                  },
                  "response": []
                },
                {
                  "_postman_id": "493be2dc-831e-4582-b378-6be715cf0501",
                  "name": "Create Operator User",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ee086e9b-758c-4f73-b785-b307f28d6c73",
                        "exec": [
                          "pm.test(\"User was created and variables set.\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "    pm.environment.unset(\"operator_user_ID\");",
                          "    pm.environment.unset(\"operator_user_name\");",
                          "    pm.environment.set(\"operator_user_ID\",jsonData[1].result.records[jsonData[1].result.records.length-1].id);",
                          "    pm.environment.set(\"operator_user_name\",jsonData[1].result.records[jsonData[1].result.records.length-1].username);",
                          "});",
                          "",
                          "operator_user_email = pm.environment.get(\"operator_user_email\");",
                          "",
                          "pm.test(\"Body has email\", function () {",
                          "    pm.expect(pm.response.text()).to.include(operator_user_email);",
                          "});",
                          "",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7be8edf0-db71-40b0-b037-c7a04d78613a",
                        "exec": [
                          "pm.environment.set(\"operator_user\", \"operator2\");",
                          "pm.environment.set(\"operator_password\", \"sm2000\");",
                          "pm.environment.set(\"operator_user_email\", \"chris5@gmail.com\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"createUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": 0,\n\t\t\t\t\"username\": \"{{operator_user}}\",\n\t\t\t\t\"password\": \"{{operator_password}}\",\n\t\t\t\t\"personal_name\": \"PName\",\n\t\t\t\t\"email\": \"{{operator_user_email}}\",\n\t\t\t\t\"date_created\": \"\",\n\t\t\t\t\"is_admin\": false\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 26\n\t},\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 27\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "creates an admin user in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "78aa28de-c88a-4c24-b1b2-75e6604f822b",
                  "name": "Logout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a4a9eb4d-86f2-40f4-9f83-c26106d731b6",
                        "exec": [
                          "pm.test(\"Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "52ddcadd-2443-43f8-99d6-7fb170f064d1",
                  "name": "Invalid Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "96251dfb-6aca-460e-9149-4c5424c634e5",
                        "exec": [
                          "pm.test(\"C127608 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127608 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{operator_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "wrongPassword",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d06b2838-4781-4749-9b0f-bd782b2a29f9",
                  "name": "Invalid Username",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fd02c6a7-adde-43cd-bc48-d1a53fe7dbf1",
                        "exec": [
                          "pm.test(\"C127609 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127609 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "wrongUser",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{operator_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "2f527133-cdda-4d3d-aac0-02b7823bdeec",
                  "name": "Correct Username, Incorrect Password Case",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "82d6b2fb-455a-48e0-b262-de164c35bf33",
                        "exec": [
                          "pm.test(\"C127610 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127610 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{operator_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "SM1000",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "a01ea819-bd5f-431b-8e76-32f9c7088640",
                  "name": "Empty Fields",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "cdf83a48-2d7c-43ee-a1dd-8fcb13cfbb95",
                        "exec": [
                          "pm.test(\"C127661 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127661 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127661 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "0109ea04-984e-43ce-8ddb-c20493e3e25b",
                  "name": "Empty Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1c1fbaef-b26d-431f-96d2-ea393aca93ba",
                        "exec": [
                          "pm.test(\"C127606 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127606 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127606 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">Invalid credentials</div>\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{operator_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "60383c98-be5d-44bb-828a-09e5dc8d23d1",
                  "name": "Empty Username",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b005cd07-393e-4d33-b1dc-e141d3b7ae7f",
                        "exec": [
                          "pm.test(\"C127607 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127607 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          "",
                          "pm.test(\"C127607 Body Contains Error\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<div style=\\\"color: red\\\">No match for username</div>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{operator_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "7f8b8040-1f61-4bf3-8d8e-31499d78cf0f",
                  "name": "Wrong Username Case, Correct Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a421a29-f4c1-42ec-bc72-94f25b1a0379",
                        "exec": [
                          "pm.test(\"C127611 Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=false ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "OPERATOR2",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{operator_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d820367f-1c0f-4f17-82bd-50c64469f7fa",
                  "name": "Logout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a4a9eb4d-86f2-40f4-9f83-c26106d731b6",
                        "exec": [
                          "pm.test(\"C127612 Body Contains Login Fields\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"user\\\">\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "f37bfba5-89d8-4965-b430-16d8de604b7a",
                  "name": "Login Operator",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "09ae0a77-c4f9-493c-abf9-fa61693c6898",
                        "exec": [
                          "pm.test(\"C127613 Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=false ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "value": "{{operator_user}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "{{operator_password}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}",
                    "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a6408328-10fd-4484-a454-01798fde1a5b",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "35cf5db4-f295-4880-9ca9-4b2309aa394a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "d19df92b-e38b-497c-a152-e54046b2665d",
              "name": "APIs",
              "description": "get lists of different items/information from stream manager.",
              "item": [
                {
                  "_postman_id": "e0912d77-32ea-497b-92dc-aba87ba5ddd2",
                  "name": "List APIs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "13d9196c-9908-4a61-8aaa-54f6cf6781d5",
                        "exec": [
                          "pm.test(\"C127621 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127621 Body contains api names\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Ext.app.REMOTING_API\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{url}}/1.0/direct/api"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f772db1-d93d-4948-b616-6fab453c0ba1",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7388327a-7e65-48b9-bd99-48f68fa09ab0",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "95b23f7b-2bbb-468d-bd15-30a8b0642180",
              "name": "API Keys",
              "description": null,
              "item": [
                {
                  "_postman_id": "4fe5bc16-066a-41cc-89b9-0312535462b3",
                  "name": "Op Cannot Create API Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1181797c-a819-4e06-a600-15bec4595719",
                        "exec": [
                          "pm.test(\"C127650 Body shows failure message\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":false,\"message\":\"not logged in\"');",
                          "});",
                          "",
                          "pm.test(\"C127650 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"createApiKey\",\r\n    \"data\": [\r\n      {\r\n        \"user_key\": \"\",\r\n        \"level\": \"\",\r\n        \"date_created\": \"\",\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"primary phone\": \"\",\r\n        \"email address\": \"\",\r\n        \"contact_id\": 1,\r\n        \"zone_name\": \"\",\r\n        \"zone_id\": 1,\r\n        \"id\": null\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 19\r\n  },\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"getApikeys\",\r\n    \"data\": [\r\n      {\r\n        \"page\": 1,\r\n        \"start\": 0,\r\n        \"limit\": 25\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 20\r\n  }\r\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "41115fa2-56f5-4443-9a81-6c60af3ac4ca",
                  "name": "Retrieve Api Keys - Operator Cannot Retrieve Keys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b1a39797-3f6c-410d-a612-37ee0d33f690",
                        "exec": [
                          "pm.test(\"C127651 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"getApikeys\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127651 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "var obj = JSON.parse(pm.response.text());",
                          "",
                          "pm.test(\"C127651 No Keys are returned\", function () {",
                          "    pm.expect(obj[0].result.total === 0);",
                          "}); "
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n    {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 20\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all the API keys."
                  },
                  "response": []
                },
                {
                  "_postman_id": "0b47aac4-60a5-4d82-9417-828acf4d236e",
                  "name": "Delete Api Key - Operator Cannot Remove Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4f9c766-fe9c-4c3a-a7e5-b171779af845",
                        "exec": [
                          "pm.test(\"C127652 Body shows failure message\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":false,\"message\":\"not logged in\"');",
                          "});",
                          "",
                          "pm.test(\"C127652 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"deleteApiKey\",\n    \"data\": [\n      {\n        \"user_key\": \"{{user_key}}\",\n        \"level\": 10,\n        \"date_created\": {\n          \"date\": \"2018-07-02 18:13:32.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"first_name\": \"DOT\",\n        \"last_name\": \"Government\",\n        \"primary phone\": \"\",\n        \"email address\": \"\",\n        \"contact_id\": 1,\n        \"zone_name\": \"Public\",\n        \"zone_id\": 1,\n        \"id\": null\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 23\n  },\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 24\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "deletes an api key"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ae6caa51-c51d-40fe-a258-52a8cd9ade22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3735d9f5-0f5f-4b3d-bf24-fbc4be0ea2ef",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "29fcd312-eb6c-40e7-9616-2f76e0161bf2",
              "name": "Dashboard",
              "description": "APIs called for the dashboard",
              "item": [
                {
                  "_postman_id": "70d925e5-2f28-41e6-a710-dd715279dfe9",
                  "name": "Get appliances",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "21b479ff-d576-41d5-9885-d6b5f624ab38",
                        "exec": [
                          "pm.test(\"C127644 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127644 Appliances were listed\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.result.success).to.eql(true);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Appliance\",\n\t\"method\": \"getAppliances\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 2\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "5666bcfb-c8aa-47e0-bfc6-94942a811580",
                  "name": "Get sfs capacity",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4dc5ab6-a817-4dc4-890b-94c1e9177b89",
                        "exec": [
                          "pm.test(\"C127645 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127645 Success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.result.success).to.eql(true);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Capacity\",\n\t\"method\": \"getSfsCapacity\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 14\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "817f9a17-0934-4183-a450-cff2260441fd",
              "name": "Streams",
              "description": "API tests for streams tab for operators",
              "item": [
                {
                  "_postman_id": "c4e7dc13-845b-4759-9b15-68ae090d4baf",
                  "name": "Get grid",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a03e176-fca7-4fbe-909b-b73dad6e56bc",
                        "exec": [
                          "pm.test(\"C127647 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127647 Success message present\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"success\":true');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 21\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "returns a list of camera streams (camera grid)"
                  },
                  "response": []
                },
                {
                  "_postman_id": "109eca6d-c77c-4329-a6aa-7c660d78e952",
                  "name": "View a stream",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "62c5ee91-626f-487f-9f9b-3eb440859912",
                        "exec": [
                          "pm.test(\"C127648 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127648 Verify stream info was returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[0].result.success).to.eql(true);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"Streams\",\n    \"method\": \"getAppliancesFromMetadata\",\n    \"data\": [\n      {\n        \"metadataId\": 6,\n        \"clearCache\": false,\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25,\n        \"sort\": [\n          {\n            \"property\": \"model\",\n            \"direction\": \"ASC\"\n          }\n        ]\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 15\n  },\n  {\n    \"action\": \"Streams\",\n    \"method\": \"getAppliancesFromMetadata\",\n    \"data\": [\n      {\n        \"metadataId\": 6,\n        \"clearCache\": false,\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25,\n        \"sort\": [\n          {\n            \"property\": \"model\",\n            \"direction\": \"ASC\"\n          }\n        ]\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 16\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "get information for a specific stream"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "0b019538-cdbe-4f3b-8324-9d3e8b4c3055",
              "name": "Appliances",
              "description": "Tests which are used for the appliance tab of stream manager.",
              "item": [
                {
                  "_postman_id": "bd1fd627-2009-4ab0-9662-e46ab58a2296",
                  "name": "Retrieve appliance",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0db209bd-a2bd-44a2-8a16-f7674e86277d",
                        "exec": [
                          "pm.test(\"C127653 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127653 Correct Hostname\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"hostname\\\":\\\"Jennnn-ts\\\"\");",
                          "});",
                          "",
                          "pm.test(\"C127653 Correct Model\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"model\\\":\\\"SFS1000\\\"\");",
                          "});",
                          "",
                          "sfsVersion = pm.environment.get(\"SfsVersion\");",
                          "pm.test(\"C127653 Correct SFS Version\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"software_version\\\":\\\"0.0.999\\\"\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "d14d5469-f58b-46b0-822e-7d9f790fed06",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"Appliance\",\n  \"method\": \"getAppliances\",\n  \"data\": [\n    {\n      \"page\": 1,\n      \"start\": 0,\n      \"limit\": 25,\n      \"group\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ],\n      \"sort\": [\n        {\n          \"property\": \"location_name\",\n          \"direction\": \"ASC\"\n        }\n      ]\n    }\n  ],\n  \"type\": \"rpc\",\n  \"tid\": 15\n}"
                    },
                    "url": "{{url}}/1.0/direct/router/"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "a09b6f54-0560-4fbf-ad83-e643eabf6021",
              "name": "Profile",
              "description": "api calls that help you manage user profile",
              "item": [
                {
                  "_postman_id": "33f84cb2-c776-4180-8ba5-9ab57ea3c0a3",
                  "name": "Read Profile",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b873ecaf-b3eb-4cfb-ae8f-4773be5da451",
                        "exec": [
                          "operator_user_name = pm.environment.get(\"operator_user_name\");",
                          "operator_user_email = pm.environment.get(\"operator_user_email\"); ",
                          "",
                          "pm.test(\"C127622 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127622 Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"getUsers\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "pm.test(\"C127622 Body includes username\", function () {",
                          "    pm.expect(pm.response.text()).to.include(operator_user_name);",
                          "});",
                          "",
                          "pm.test(\"C127622 Body includes email\", function () {",
                          "    pm.expect(pm.response.text()).to.include(operator_user_email);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
                  },
                  "response": []
                },
                {
                  "_postman_id": "15cc3096-bc4c-4125-9d92-261e4f199540",
                  "name": "Update operator profile",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "99fe64b1-19ab-4b7f-9d4f-01696e144f19",
                        "exec": [
                          "pm.test(\"C127623 Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"C127623 operator was updated\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[0].result.success).to.eql(true);",
                          "});",
                          "",
                          "pm.test(\"C127623 Body contains new email\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"email\":\"jpeeling_edit@skylinenet.net\"');",
                          "});",
                          "",
                          "pm.test(\"C127623 Body contains new personal name\", function () {",
                          "    pm.expect(pm.response.text()).to.include('\"personal_name\":\"Jennnnnnnnnnnn\"');",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b491a78-3df2-49f3-a594-8663feab62cf",
                        "exec": [
                          "pm.environment.set(\"operator_2_password_edit\", \"new_password_\"+\"edit\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"updateUser\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"id\": {{operator_user_ID}},\n\t\t\t\t\"username\": \"{{operator_user}}\",\n\t\t\t\t\"password\": \"{{operator_2_password_edit}}\",\n\t\t\t\t\"personal_name\": \"Jennnnnnnnnnnn\",\n\t\t\t\t\"email\": \"jpeeling_edit@skylinenet.net\",\n\t\t\t\t\"date_created\": {\n\t\t\t\t\t\"date\": \"2018-06-25 14:28:11.000000\",\n\t\t\t\t\t\"timezone_type\": 3,\n\t\t\t\t\t\"timezone\": \"GMT\"\n\t\t\t\t},\n\t\t\t\t\"is_admin\": false\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 14\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "52d46522-a182-479f-8424-ee4f44027cce",
                  "name": "Login With New Password",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8a81fe8e-d0ec-4a6f-a893-47108cdd8e4f",
                        "exec": [
                          "pm.test(\"C127624 Body shows Operator Logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=false ;\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "type": "text",
                          "value": "{{operator_user}}"
                        },
                        {
                          "key": "password",
                          "value": "{{operator_2_password_edit}}",
                          "description": "",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{url}}",
                    "description": "logs in with a valid username\nadmin - admin / sm1000\noperator - operator / sm1000"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "72c5b375-8892-473b-bb4c-52899e440abe",
              "name": "Get Lists",
              "description": "get lists of different items/information from stream manager.",
              "item": [
                {
                  "_postman_id": "63231cf4-11cd-4749-98df-1a5e4d43d6ad",
                  "name": "Get All Contacts",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bd01da50-638a-4d06-ac48-355d8066b431",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 1\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all contacts associated with the stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "9acf4ec1-bafe-4225-91d2-0f34c0e74791",
                  "name": "Get All Appliances",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "523b5782-12a9-4a8e-8ee7-4bca8c45a8c3",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"action\": \"Appliance\",\n\t\t\"method\": \"getAppliances\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"location_name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 2\n\t}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all appliances"
                  },
                  "response": []
                },
                {
                  "_postman_id": "0feaafd2-b434-400e-a2e9-7e3a1f9fb8db",
                  "name": "Get all issue streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3210c158-8837-41a2-97ff-5fbb4016ead3",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getIssueStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 3\n\t}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all issue streams from stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "7feaccd8-ab37-430b-ae76-c6092eaa4907",
                  "name": "Get all Locations",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "26e22d2e-a6f2-4614-b6da-0e1d0fd512de",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Location\",\n\t\t\"method\": \"getLocations\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 4\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all locations associated with a stream manager"
                  },
                  "response": []
                },
                {
                  "_postman_id": "795ced3d-ba2f-44ca-af77-525fa1cb07bd",
                  "name": "Get all offline sfs streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ea61cd6c-d14d-4c10-87e0-3545c4079013",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"Media\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 5\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all offlined sfs streams from stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "36bd93e3-d082-40a4-9782-fe8e7778e10d",
                  "name": "Get all offlined streams no media flag",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a52af66e-6564-479f-85fc-78e49c204817",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 6\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "This technically has its own TID. Im not really sure how much it differs from Get all offline sfs streams. The only difference is that there is no type: media property in this one."
                  },
                  "response": []
                },
                {
                  "_postman_id": "498d3fab-03c0-48db-b07b-e471927ad79b",
                  "name": "Get all offline streams SSL VPN",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d9c63487-9f93-4637-98c1-71cf367ceb72",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getOfflineSfsStreams\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"offlineAppliance\": \"SSL VPN\",\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 8\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "offline appliace = SSL VPN"
                  },
                  "response": []
                },
                {
                  "_postman_id": "8c4308b5-371f-4e05-98b0-f346148a4d4a",
                  "name": "Get all streams",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7abfae09-2dc8-421e-a8c0-32b99e03a824",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Streams\",\n\t\t\"method\": \"getGrid\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25,\n\t\t\t\t\"group\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"sort\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 9\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a list of all streams (grid)"
                  },
                  "response": []
                },
                {
                  "_postman_id": "59f07a7e-3421-4403-8c93-d44545aac3e8",
                  "name": "Get all users",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "db8bbf11-03dd-43d1-8612-7215cafecab6",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Users\",\n\t\t\"method\": \"getUsers\",\n\t\t\"data\": null,\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 10\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Retrieves a list of users. if you are an admin, you should see all the users. if you are an operator, you should only see yourself."
                  },
                  "response": []
                },
                {
                  "_postman_id": "70de42ee-ea2b-498a-b91c-788e5f3827be",
                  "name": "Get all zones",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41b1a442-474c-42c5-a538-eb588d29a1a7",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Zone\",\n\t\t\"method\": \"getZones\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 11\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "Gets a list of all zones in stream manager"
                  },
                  "response": []
                },
                {
                  "_postman_id": "bb9d0720-fa4b-4967-a189-96290d07421f",
                  "name": "Get Stream Map",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e5b299d5-3abd-42ad-89b8-cb71210d6735",
                        "exec": [
                          "//this API gets information for stream test_stream_alpha, which has a metadata_id of 1",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getStreamMap\",\n\t\"data\": [\n\t\t{\n\t\t\t\"metadataId\": {{metadata_id}}\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 17\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "gets a stream map of a test stream based on its metadata_id"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "bb66ac50-ab79-448a-8362-48b62020bbe8",
              "name": "Reports",
              "description": "these are the APIs which are called when you view reports in the reports tab of stream manager.",
              "item": [
                {
                  "_postman_id": "9ee63fd2-bdb5-4ea8-990d-1f038f5ac8f8",
                  "name": "getAllStreamStatus",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5bb8f8e4-838d-4008-ad62-f9b3e552c10b",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getAllStreamStatus\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 22\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "this is the response from using the 'Current status' report in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "26f8a73a-3b5e-45cc-9d2e-2850958ae727",
                  "name": "Stream metadata report",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9309f386-78cc-4e1f-92f1-0153d75e9154",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 23\n}"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "this is the response when you get data for the 'stream metadata' report in stream manager."
                  },
                  "response": []
                },
                {
                  "_postman_id": "43cc5353-4939-48d7-904c-b48fb4861fec",
                  "name": "stream network config report",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fc3fe377-5c3a-4b40-bd5a-d93dacb54412",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"action\": \"Streams\",\n\t\"method\": \"getGrid\",\n\t\"data\": [\n\t\t{\n\t\t\t\"page\": 1,\n\t\t\t\"start\": 0,\n\t\t\t\"limit\": 25,\n\t\t\t\"group\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"sort\": [\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"jurisdiction\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"property\": \"name\",\n\t\t\t\t\t\"direction\": \"ASC\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"type\": \"rpc\",\n\t\"tid\": 24\n}"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "a4b77f47-787e-46e4-8522-dfe65d575bcf",
      "name": "Customer Facing",
      "description": "",
      "item": [
        {
          "_postman_id": "2aba9653-986a-4fec-ac29-34b493701c73",
          "name": "1.0",
          "description": "",
          "item": [
            {
              "_postman_id": "d5f93000-1696-420d-9884-ede0e0490aed",
              "name": "GetAll Calls",
              "description": null,
              "item": [
                {
                  "_postman_id": "32e5174f-35f1-4d46-bf11-4a5d69b9374f",
                  "name": "Login Admin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1efdff2a-8c60-4bc4-a201-ecce7e8e3948",
                        "exec": [
                          "pm.test(\"Body IsAdministrator field to show it is logged in\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"IsAdministrator=true ;\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Chris",
                        "value": "FindME",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "user",
                          "type": "text",
                          "value": "{{admin_user}}",
                          "description": ""
                        },
                        {
                          "key": "password",
                          "type": "text",
                          "value": "{{admin_password}}"
                        }
                      ]
                    },
                    "url": "{{url}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "91b2f66d-6a77-454d-a97e-43e992c8db5a",
                  "name": "Create New Contact",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ce075b4d-4ce3-4f6a-b20f-bb185a2106ec",
                        "exec": [
                          "pm.test(\"Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createContact\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "contact_name = pm.environment.get(\"contact_name\");",
                          "",
                          "pm.test(\"Body has contact\", function () {",
                          "    pm.expect(pm.response.text()).to.include(contact_name);",
                          "});",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "// Set up next test",
                          "var obj = pm.response.json();",
                          "var record;",
                          "pm.environment.unset(\"contact_id\");",
                          "for (var i = 0; i < obj[1].result.total; i++) {",
                          "    if (obj[1].result.records[i].first_name == contact_name) {",
                          "        record = obj[1].result.records[i].id;",
                          "    }",
                          "}",
                          "pm.environment.set(\"contact_id\",record);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e380079a-dd76-479f-a16c-818c47b9259a",
                        "exec": [
                          "pm.environment.unset(\"contact_name\");",
                          "pm.environment.unset(\"contact_email\");",
                          "",
                          "var first_name = Math.floor((Math.random() * 1000000) + 1);",
                          "var email = Math.floor((Math.random() * 1000000) + 1);",
                          "",
                          "pm.environment.set(\"contact_name\", first_name);",
                          "pm.environment.set(\"contact_email\", email);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"createContact\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"first_name\": \"{{contact_name}}\",\n\t\t\t\t\"last_name\": \"Allemang\",\n\t\t\t\t\"last_updated\": \"\",\n\t\t\t\t\"primary_phone\": \"412-576-8688\",\n\t\t\t\t\"title\": \"adcl\",\n\t\t\t\t\"last_updated_by\": \"\",\n\t\t\t\t\"company_name\": \"dfvfds\",\n\t\t\t\t\"secondary_phone\": \"412-576-8688\",\n\t\t\t\t\"email_address\": \"{{contact_email}}@gmail.com\",\n\t\t\t\t\"displayx\": \"\",\n\t\t\t\t\"id\": null\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 15\n\t},\n\t{\n\t\t\"action\": \"Contact\",\n\t\t\"method\": \"getContacts\",\n\t\t\"data\": [\n\t\t\t{\n\t\t\t\t\"page\": 1,\n\t\t\t\t\"start\": 0,\n\t\t\t\t\"limit\": 25\n\t\t\t}\n\t\t],\n\t\t\"type\": \"rpc\",\n\t\t\"tid\": 16\n\t}\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "51938ded-b6ff-44a8-9a50-7a41042ceaeb",
                  "name": "Create API Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1181797c-a819-4e06-a600-15bec4595719",
                        "exec": [
                          "pm.test(\"Body shows success message\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"\\\"createApiKey\\\",\\\"result\\\":{\\\"success\\\":true\");",
                          "});",
                          "",
                          "user_key = pm.environment.get(\"user_key\");",
                          "",
                          "pm.test(\"API Key was created and variables set.\", function () {",
                          "    var obj = JSON.parse(pm.response.text());",
                          "    var record = null;",
                          "    contact_id = pm.environment.get(\"contact_id\");",
                          "",
                          "    for (var i = 0; i < obj[1].result.total; i++){",
                          "        if (obj[1].result.records[i].zone_id == 2 && obj[1].result.records[i].contact_id == contact_id){",
                          "            record = obj[1].result.records[i];",
                          "        }",
                          "    }",
                          "    pm.environment.unset(\"user_key\");",
                          "    pm.environment.set(\"user_key\",record.user_key);",
                          "});",
                          "",
                          "user_key = pm.environment.get(\"user_key\");",
                          "",
                          "pm.test(\"Body has new key\", function () {",
                          "    pm.expect(pm.response.text()).to.include(user_key);",
                          "});",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\" API Key list is not empty\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.total) !== null;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"createApiKey\",\r\n    \"data\": [\r\n      {\r\n        \"user_key\": \"\",\r\n        \"level\": \"\",\r\n        \"date_created\": \"\",\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"primary phone\": \"\",\r\n        \"email address\": \"\",\r\n        \"contact_id\": \"{{contact_id}}\",\r\n        \"zone_name\": \"\",\r\n        \"zone_id\": 2,\r\n        \"id\": null\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 19\r\n  },\r\n  {\r\n    \"action\": \"ApiKey\",\r\n    \"method\": \"getApikeys\",\r\n    \"data\": [\r\n      {\r\n        \"page\": 1,\r\n        \"start\": 0,\r\n        \"limit\": 25\r\n      }\r\n    ],\r\n    \"type\": \"rpc\",\r\n    \"tid\": 20\r\n  }\r\n]"
                    },
                    "url": "{{url}}/1.0/direct/router"
                  },
                  "response": []
                },
                {
                  "_postman_id": "f35d5857-c3f1-49be-810b-6da1f798f071",
                  "name": "GetAll streams in JSON w/Valid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body is JSON format\", function () {",
                          "    pm.response.to.be.json;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_key}}&format=json",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
                  },
                  "response": []
                },
                {
                  "_postman_id": "62a7212f-de6b-452f-bdbd-8b4106f0140b",
                  "name": "GetAll streams valid data types",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41440b5f-df39-44c5-9c2b-435dc6a0960b",
                        "exec": [
                          "// Parse response body",
                          "var obj = JSON.parse(pm.response.text());",
                          "var record = obj.features[0];",
                          "",
                          "version = pm.environment.get(\"version\");",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Coordinates are in an array\", function () {",
                          "    pm.expect(record.geometry.coordinates[0]).to.not.be.undefined;",
                          "    pm.expect(record.geometry.coordinates[1]).to.not.be.undefined;",
                          "});",
                          "",
                          "pm.test(\"Active field is a bool\", function () {",
                          "    pm.expect(record.properties.active).to.be.a('boolean');",
                          "});",
                          "",
                          "pm.test(\"urls are strings\", function () {",
                          "    pm.expect(record.properties.clsp_url).to.be.a('string');",
                          "    pm.expect(record.properties.clsps_url).to.be.a('string');",
                          "    pm.expect(record.properties.https_url).to.be.a('string');",
                          "    pm.expect(record.properties.rtmp_url).to.be.a('string');",
                          "    pm.expect(record.properties.rtsp_url).to.be.a('string');",
                          "    ",
                          "});",
                          "",
                          "pm.test(\"Metadata are strings\", function () {",
                          "    pm.expect(record.properties.description).to.be.a('string');",
                          "    pm.expect(record.properties.deviceid).to.be.a('string');",
                          "    pm.expect(record.properties.direction).to.be.a('string');",
                          "    pm.expect(record.properties.id).to.be.a('string');",
                          "    pm.expect(record.properties.jurisdiction).to.be.a('string');",
                          "    pm.expect(record.properties.route).to.be.a('string');",
                          "    pm.expect(record.properties.image_url).to.be.a('string');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e935837d-0318-49f8-b93c-fedf63939ab1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_key}}&format=json",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSON format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams), which are json objects with multiple values.\n\nbased on GetAll streams API - documentation on 172.28.12.54\n\nhttps://imgur.com/a/hs2vUeM"
                  },
                  "response": []
                },
                {
                  "_postman_id": "6e974358-eca2-4a7c-8239-7040ab5c53c6",
                  "name": "GetAll streams in JSON w/invalid key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ea3a75a4-f547-4351-ac7a-272b17ad4c39",
                        "exec": [
                          "pm.test(\"Status code is 403\", function () {",
                          "    pm.response.to.have.status(403);",
                          "});",
                          "",
                          "pm.test(\"Verify invalid API error message is provided\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.error).to.eql(\"Invalid API Key.\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY=ABC123&format=json",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "ABC123",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab all cameras which can be currently pulled from stream manager with an invalid API key.\n\nexpectation: 403 error"
                  },
                  "response": []
                },
                {
                  "_postman_id": "766ab3d3-16e1-4dd7-a869-7cf1eab17a64",
                  "name": "GetAll Jsonp format Valid",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d6db7a64-fa64-4c8a-901e-062013b58e54",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Response has padding\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"callbackFunction(\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_key}}&format=jsonp&callback=callbackFunction",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "jsonp",
                          "equals": true
                        },
                        {
                          "key": "callback",
                          "value": "callbackFunction",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in JSONP format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams). The format should be JSONP\n\n"
                  },
                  "response": []
                },
                {
                  "_postman_id": "5f0f92c5-0947-4a36-a4cb-4406c7cb70a5",
                  "name": "GetAll XML format Valid",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ce7e6e40-f5bb-41d2-b035-a9ab8219f8cf",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body is in XML format\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<xml>\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getAll?X-API-KEY={{user_key}}&format=xml",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getAll"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "xml",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: grabs all cameras which can be currently pulled from stream manager with a valid API key. Returns objects in XML format.\n\nexpectation: 200 response, with multiple 'Feature' entries (streams). The format should be XML.\n\n"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "d97d1ad5-014c-4218-a5fd-cf0cc8052fe6",
              "name": "getByBounds Calls",
              "description": null,
              "item": [
                {
                  "_postman_id": "5e551910-b224-4d74-bfb0-1602356d479a",
                  "name": "getByBounds Json Format, Valid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "76cbfd0e-8e2b-42b1-8099-3447a6371de0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body is JSON format\", function () {",
                          "    pm.response.to.be.json;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=13&lng=40&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "13",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "40",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras in Json format with a valid API key. \n\nexpectation: return list of cameras in json format."
                  },
                  "response": []
                },
                {
                  "_postman_id": "ef75b2ac-e69f-4a4d-8df5-9db458999509",
                  "name": "getByBounds Json Format, Invalid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0d73228b-3eb2-4a76-ab7f-4a8b0f90d9d8",
                        "exec": [
                          "pm.test(\"Status code is 403\", function () {",
                          "    pm.response.to.have.status(403);",
                          "});",
                          "",
                          "pm.test(\"Verify invalid API error message is provided\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.error).to.eql(\"Invalid API Key.\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY=ABC123&format=json&lat=33&lng=33&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "ABC123",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab all cameras which can be currently pulled from stream manager with an invalid API key.\n\nexpectation: 403 error"
                  },
                  "response": []
                },
                {
                  "_postman_id": "38b3f9d3-e5b8-420e-a285-19c64823a653",
                  "name": "getByBounds JsonP Format, Valid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c7a87241-8255-4da7-8972-53e88ceacb48",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=jsonp&lat=33&lng=33&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "jsonp",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras in JSONP format. \n\nexpectation: return cameras in JSONP format."
                  },
                  "response": []
                },
                {
                  "_postman_id": "3461fc9f-5997-4306-9417-f6e9035b9132",
                  "name": "getByBounds XML Format, Valid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "070d143d-35f2-4a24-84a4-6875ed240ba5",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body is in XML format\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"<xml>\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=xml&lat=33&lng=33&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "xml",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras in XML format. \n\nexpectation: return XML list of cameras."
                  },
                  "response": []
                },
                {
                  "_postman_id": "e5e9151c-e3f5-43db-b856-b519b48572c8",
                  "name": "getByBounds Invalid Format, Valid Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5aee534c-eefb-40b6-b224-d2f43eaf2747",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=ABC123&lat=33&lng=33&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "ABC123",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras in a random format (\"ABC123\"). not a real format and therefore not supported\n\nexpectation: not sure. currently it just returns XML format. i'll put a ticket in or ask someone how it should actually behave."
                  },
                  "response": []
                },
                {
                  "_postman_id": "d4df9763-641e-47ea-8e6c-56cf4f0d5062",
                  "name": "getByBounds Invalid Lat/Longs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6a6aaa2a-16b7-4a71-85c0-51fe82b99c00",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=AB&lng=CD&radius=1000&active=1",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "AB",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "CD",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "1",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras in json format but provides bogus data to long/lat\n\nexpectation: still returns, just based on a long lat of 0,0... maybe we should provide an error message instead."
                  },
                  "response": []
                },
                {
                  "_postman_id": "8801c976-321e-4341-bac6-fe658dc88c48",
                  "name": "getByBounds Find Inactive Cameras",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "77be54ce-3ab1-4200-9794-b625e84a993e",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body just has empty Feature Collection\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FeatureCollection\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{url}}/1.0/streams/getByBounds?X-API-KEY={{user_key}}&format=json&lat=33&lng=33&radius=1000&active=0",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "1.0",
                        "streams",
                        "getByBounds"
                      ],
                      "query": [
                        {
                          "key": "X-API-KEY",
                          "value": "{{user_key}}",
                          "equals": true
                        },
                        {
                          "key": "format",
                          "value": "json",
                          "equals": true
                        },
                        {
                          "key": "lat",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "lng",
                          "value": "33",
                          "equals": true
                        },
                        {
                          "key": "radius",
                          "value": "1000",
                          "equals": true
                        },
                        {
                          "key": "active",
                          "value": "0",
                          "equals": true
                        }
                      ]
                    },
                    "description": "description: attempts to grab cameras with active marked as 0\n\nexpectation: not sure. so far i have never had results returned for this. so i'm not sure what the point is of specifying this flag."
                  },
                  "response": []
                },
                {
                  "_postman_id": "f80f98b8-1e74-48b7-a196-c9f37aaa8028",
                  "name": "Delete API Key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4f9c766-fe9c-4c3a-a7e5-b171779af845",
                        "exec": [
                          "user_key = pm.environment.get(\"user_key\");",
                          "",
                          "pm.test(\"Response does not contain deleted key\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(user_key);",
                          "});",
                          "",
                          "pm.test(\"deleteApiKey gives success message\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData[1].result.success).to.eql(true);",
                          "});",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Api key was deleted\", function () {",
                          "    pm.expect(pm.response.text()).to.not.include(user_key);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "[\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"deleteApiKey\",\n    \"data\": [\n      {\n        \"user_key\": \"{{user_key}}\",\n        \"level\": 10,\n        \"date_created\": {\n          \"date\": \"2018-07-02 18:13:32.000000\",\n          \"timezone_type\": 3,\n          \"timezone\": \"GMT\"\n        },\n        \"first_name\": \"DOT\",\n        \"last_name\": \"Government\",\n        \"primary phone\": \"\",\n        \"email address\": \"\",\n        \"contact_id\": 1,\n        \"zone_name\": \"Public\",\n        \"zone_id\": 1,\n        \"id\": null\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 23\n  },\n  {\n    \"action\": \"ApiKey\",\n    \"method\": \"getApikeys\",\n    \"data\": [\n      {\n        \"page\": 1,\n        \"start\": 0,\n        \"limit\": 25\n      }\n    ],\n    \"type\": \"rpc\",\n    \"tid\": 24\n  }\n]"
                    },
                    "url": "{{url}}/1.0/direct/router",
                    "description": "deletes an api key"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "0109c1a3-1da7-4198-8cf4-6528a35eeaf9",
          "name": "5.0",
          "description": "",
          "item": [],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "1526d2a2-2fc1-4a7a-ad62-0cc1af01ccbb",
        "type": "text/javascript",
        "exec": [
          "",
          "var JSONtoCompare = {",
          "            \"type\": \"Feature\",",
          "            \"geometry\": {",
          "                \"coordinates\": [",
          "                    33,",
          "                    33",
          "                ],",
          "                \"type\": \"Point\"",
          "            },",
          "            \"properties\": {",
          "                \"direction\": \"\",",
          "                \"mrm\": 0,",
          "                \"id\": 42,",
          "                \"jurisdiction\": \"\",",
          "                \"route\": \"\",",
          "                \"description\": \"I-66/MM69/WB/Exit69,NorthSycamoreSt\",",
          "                \"deviceid\": \"\",",
          "                \"rtmp_url\": \"rtmp://:1935/rtplive/FairfaxVideo0330\",",
          "                \"ios_url\": \"http://:1935/rtplive/FairfaxVideo0330/playlist.m3u8\",",
          "                \"rtsp_url\": \"rtsp:///rtplive/FairfaxVideo0330\",",
          "                \"image_url\": \"http://imageserver.example.com/thumbs/FairfaxVideo0330.flv.png\",",
          "                \"active\": true",
          "            }",
          "        }",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "73aeb72d-ee0b-4c20-9aff-8078308dd86f",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}